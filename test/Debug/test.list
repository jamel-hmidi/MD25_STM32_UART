
test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003868  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  080039f0  080039f0  000139f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003a10  08003a10  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08003a10  08003a10  00013a10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003a18  08003a18  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003a18  08003a18  00013a18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003a1c  08003a1c  00013a1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003a20  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          0000010c  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000118  20000118  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00009d81  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001833  00000000  00000000  00029dbd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000007b0  00000000  00000000  0002b5f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000728  00000000  00000000  0002bda0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002086e  00000000  00000000  0002c4c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000099c3  00000000  00000000  0004cd36  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cb274  00000000  00000000  000566f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0012196d  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001ec0  00000000  00000000  001219c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080039d8 	.word	0x080039d8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	080039d8 	.word	0x080039d8

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b974 	b.w	80004c8 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468e      	mov	lr, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14d      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000206:	428a      	cmp	r2, r1
 8000208:	4694      	mov	ip, r2
 800020a:	d969      	bls.n	80002e0 <__udivmoddi4+0xe8>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b152      	cbz	r2, 8000228 <__udivmoddi4+0x30>
 8000212:	fa01 f302 	lsl.w	r3, r1, r2
 8000216:	f1c2 0120 	rsb	r1, r2, #32
 800021a:	fa20 f101 	lsr.w	r1, r0, r1
 800021e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000222:	ea41 0e03 	orr.w	lr, r1, r3
 8000226:	4094      	lsls	r4, r2
 8000228:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800022c:	0c21      	lsrs	r1, r4, #16
 800022e:	fbbe f6f8 	udiv	r6, lr, r8
 8000232:	fa1f f78c 	uxth.w	r7, ip
 8000236:	fb08 e316 	mls	r3, r8, r6, lr
 800023a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800023e:	fb06 f107 	mul.w	r1, r6, r7
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f106 30ff 	add.w	r0, r6, #4294967295
 800024e:	f080 811f 	bcs.w	8000490 <__udivmoddi4+0x298>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 811c 	bls.w	8000490 <__udivmoddi4+0x298>
 8000258:	3e02      	subs	r6, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a5b      	subs	r3, r3, r1
 800025e:	b2a4      	uxth	r4, r4
 8000260:	fbb3 f0f8 	udiv	r0, r3, r8
 8000264:	fb08 3310 	mls	r3, r8, r0, r3
 8000268:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800026c:	fb00 f707 	mul.w	r7, r0, r7
 8000270:	42a7      	cmp	r7, r4
 8000272:	d90a      	bls.n	800028a <__udivmoddi4+0x92>
 8000274:	eb1c 0404 	adds.w	r4, ip, r4
 8000278:	f100 33ff 	add.w	r3, r0, #4294967295
 800027c:	f080 810a 	bcs.w	8000494 <__udivmoddi4+0x29c>
 8000280:	42a7      	cmp	r7, r4
 8000282:	f240 8107 	bls.w	8000494 <__udivmoddi4+0x29c>
 8000286:	4464      	add	r4, ip
 8000288:	3802      	subs	r0, #2
 800028a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800028e:	1be4      	subs	r4, r4, r7
 8000290:	2600      	movs	r6, #0
 8000292:	b11d      	cbz	r5, 800029c <__udivmoddi4+0xa4>
 8000294:	40d4      	lsrs	r4, r2
 8000296:	2300      	movs	r3, #0
 8000298:	e9c5 4300 	strd	r4, r3, [r5]
 800029c:	4631      	mov	r1, r6
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d909      	bls.n	80002ba <__udivmoddi4+0xc2>
 80002a6:	2d00      	cmp	r5, #0
 80002a8:	f000 80ef 	beq.w	800048a <__udivmoddi4+0x292>
 80002ac:	2600      	movs	r6, #0
 80002ae:	e9c5 0100 	strd	r0, r1, [r5]
 80002b2:	4630      	mov	r0, r6
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	fab3 f683 	clz	r6, r3
 80002be:	2e00      	cmp	r6, #0
 80002c0:	d14a      	bne.n	8000358 <__udivmoddi4+0x160>
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xd4>
 80002c6:	4282      	cmp	r2, r0
 80002c8:	f200 80f9 	bhi.w	80004be <__udivmoddi4+0x2c6>
 80002cc:	1a84      	subs	r4, r0, r2
 80002ce:	eb61 0303 	sbc.w	r3, r1, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	469e      	mov	lr, r3
 80002d6:	2d00      	cmp	r5, #0
 80002d8:	d0e0      	beq.n	800029c <__udivmoddi4+0xa4>
 80002da:	e9c5 4e00 	strd	r4, lr, [r5]
 80002de:	e7dd      	b.n	800029c <__udivmoddi4+0xa4>
 80002e0:	b902      	cbnz	r2, 80002e4 <__udivmoddi4+0xec>
 80002e2:	deff      	udf	#255	; 0xff
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	2a00      	cmp	r2, #0
 80002ea:	f040 8092 	bne.w	8000412 <__udivmoddi4+0x21a>
 80002ee:	eba1 010c 	sub.w	r1, r1, ip
 80002f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f6:	fa1f fe8c 	uxth.w	lr, ip
 80002fa:	2601      	movs	r6, #1
 80002fc:	0c20      	lsrs	r0, r4, #16
 80002fe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000302:	fb07 1113 	mls	r1, r7, r3, r1
 8000306:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800030a:	fb0e f003 	mul.w	r0, lr, r3
 800030e:	4288      	cmp	r0, r1
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x12c>
 8000312:	eb1c 0101 	adds.w	r1, ip, r1
 8000316:	f103 38ff 	add.w	r8, r3, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x12a>
 800031c:	4288      	cmp	r0, r1
 800031e:	f200 80cb 	bhi.w	80004b8 <__udivmoddi4+0x2c0>
 8000322:	4643      	mov	r3, r8
 8000324:	1a09      	subs	r1, r1, r0
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb1 f0f7 	udiv	r0, r1, r7
 800032c:	fb07 1110 	mls	r1, r7, r0, r1
 8000330:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000334:	fb0e fe00 	mul.w	lr, lr, r0
 8000338:	45a6      	cmp	lr, r4
 800033a:	d908      	bls.n	800034e <__udivmoddi4+0x156>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 31ff 	add.w	r1, r0, #4294967295
 8000344:	d202      	bcs.n	800034c <__udivmoddi4+0x154>
 8000346:	45a6      	cmp	lr, r4
 8000348:	f200 80bb 	bhi.w	80004c2 <__udivmoddi4+0x2ca>
 800034c:	4608      	mov	r0, r1
 800034e:	eba4 040e 	sub.w	r4, r4, lr
 8000352:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000356:	e79c      	b.n	8000292 <__udivmoddi4+0x9a>
 8000358:	f1c6 0720 	rsb	r7, r6, #32
 800035c:	40b3      	lsls	r3, r6
 800035e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000362:	ea4c 0c03 	orr.w	ip, ip, r3
 8000366:	fa20 f407 	lsr.w	r4, r0, r7
 800036a:	fa01 f306 	lsl.w	r3, r1, r6
 800036e:	431c      	orrs	r4, r3
 8000370:	40f9      	lsrs	r1, r7
 8000372:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000376:	fa00 f306 	lsl.w	r3, r0, r6
 800037a:	fbb1 f8f9 	udiv	r8, r1, r9
 800037e:	0c20      	lsrs	r0, r4, #16
 8000380:	fa1f fe8c 	uxth.w	lr, ip
 8000384:	fb09 1118 	mls	r1, r9, r8, r1
 8000388:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800038c:	fb08 f00e 	mul.w	r0, r8, lr
 8000390:	4288      	cmp	r0, r1
 8000392:	fa02 f206 	lsl.w	r2, r2, r6
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b8>
 8000398:	eb1c 0101 	adds.w	r1, ip, r1
 800039c:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a0:	f080 8088 	bcs.w	80004b4 <__udivmoddi4+0x2bc>
 80003a4:	4288      	cmp	r0, r1
 80003a6:	f240 8085 	bls.w	80004b4 <__udivmoddi4+0x2bc>
 80003aa:	f1a8 0802 	sub.w	r8, r8, #2
 80003ae:	4461      	add	r1, ip
 80003b0:	1a09      	subs	r1, r1, r0
 80003b2:	b2a4      	uxth	r4, r4
 80003b4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003b8:	fb09 1110 	mls	r1, r9, r0, r1
 80003bc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003c4:	458e      	cmp	lr, r1
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1e2>
 80003c8:	eb1c 0101 	adds.w	r1, ip, r1
 80003cc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d0:	d26c      	bcs.n	80004ac <__udivmoddi4+0x2b4>
 80003d2:	458e      	cmp	lr, r1
 80003d4:	d96a      	bls.n	80004ac <__udivmoddi4+0x2b4>
 80003d6:	3802      	subs	r0, #2
 80003d8:	4461      	add	r1, ip
 80003da:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003de:	fba0 9402 	umull	r9, r4, r0, r2
 80003e2:	eba1 010e 	sub.w	r1, r1, lr
 80003e6:	42a1      	cmp	r1, r4
 80003e8:	46c8      	mov	r8, r9
 80003ea:	46a6      	mov	lr, r4
 80003ec:	d356      	bcc.n	800049c <__udivmoddi4+0x2a4>
 80003ee:	d053      	beq.n	8000498 <__udivmoddi4+0x2a0>
 80003f0:	b15d      	cbz	r5, 800040a <__udivmoddi4+0x212>
 80003f2:	ebb3 0208 	subs.w	r2, r3, r8
 80003f6:	eb61 010e 	sbc.w	r1, r1, lr
 80003fa:	fa01 f707 	lsl.w	r7, r1, r7
 80003fe:	fa22 f306 	lsr.w	r3, r2, r6
 8000402:	40f1      	lsrs	r1, r6
 8000404:	431f      	orrs	r7, r3
 8000406:	e9c5 7100 	strd	r7, r1, [r5]
 800040a:	2600      	movs	r6, #0
 800040c:	4631      	mov	r1, r6
 800040e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000412:	f1c2 0320 	rsb	r3, r2, #32
 8000416:	40d8      	lsrs	r0, r3
 8000418:	fa0c fc02 	lsl.w	ip, ip, r2
 800041c:	fa21 f303 	lsr.w	r3, r1, r3
 8000420:	4091      	lsls	r1, r2
 8000422:	4301      	orrs	r1, r0
 8000424:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000430:	fb07 3610 	mls	r6, r7, r0, r3
 8000434:	0c0b      	lsrs	r3, r1, #16
 8000436:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800043a:	fb00 f60e 	mul.w	r6, r0, lr
 800043e:	429e      	cmp	r6, r3
 8000440:	fa04 f402 	lsl.w	r4, r4, r2
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x260>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f100 38ff 	add.w	r8, r0, #4294967295
 800044e:	d22f      	bcs.n	80004b0 <__udivmoddi4+0x2b8>
 8000450:	429e      	cmp	r6, r3
 8000452:	d92d      	bls.n	80004b0 <__udivmoddi4+0x2b8>
 8000454:	3802      	subs	r0, #2
 8000456:	4463      	add	r3, ip
 8000458:	1b9b      	subs	r3, r3, r6
 800045a:	b289      	uxth	r1, r1
 800045c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000460:	fb07 3316 	mls	r3, r7, r6, r3
 8000464:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000468:	fb06 f30e 	mul.w	r3, r6, lr
 800046c:	428b      	cmp	r3, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x28a>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f106 38ff 	add.w	r8, r6, #4294967295
 8000478:	d216      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 800047a:	428b      	cmp	r3, r1
 800047c:	d914      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800047e:	3e02      	subs	r6, #2
 8000480:	4461      	add	r1, ip
 8000482:	1ac9      	subs	r1, r1, r3
 8000484:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000488:	e738      	b.n	80002fc <__udivmoddi4+0x104>
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e705      	b.n	800029c <__udivmoddi4+0xa4>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e3      	b.n	800025c <__udivmoddi4+0x64>
 8000494:	4618      	mov	r0, r3
 8000496:	e6f8      	b.n	800028a <__udivmoddi4+0x92>
 8000498:	454b      	cmp	r3, r9
 800049a:	d2a9      	bcs.n	80003f0 <__udivmoddi4+0x1f8>
 800049c:	ebb9 0802 	subs.w	r8, r9, r2
 80004a0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7a3      	b.n	80003f0 <__udivmoddi4+0x1f8>
 80004a8:	4646      	mov	r6, r8
 80004aa:	e7ea      	b.n	8000482 <__udivmoddi4+0x28a>
 80004ac:	4620      	mov	r0, r4
 80004ae:	e794      	b.n	80003da <__udivmoddi4+0x1e2>
 80004b0:	4640      	mov	r0, r8
 80004b2:	e7d1      	b.n	8000458 <__udivmoddi4+0x260>
 80004b4:	46d0      	mov	r8, sl
 80004b6:	e77b      	b.n	80003b0 <__udivmoddi4+0x1b8>
 80004b8:	3b02      	subs	r3, #2
 80004ba:	4461      	add	r1, ip
 80004bc:	e732      	b.n	8000324 <__udivmoddi4+0x12c>
 80004be:	4630      	mov	r0, r6
 80004c0:	e709      	b.n	80002d6 <__udivmoddi4+0xde>
 80004c2:	4464      	add	r4, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e742      	b.n	800034e <__udivmoddi4+0x156>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b084      	sub	sp, #16
 80004d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	uint32_t potValue = 0;
 80004d2:	2300      	movs	r3, #0
 80004d4:	60fb      	str	r3, [r7, #12]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004d6:	f000 fb0b 	bl	8000af0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004da:	f000 f83d 	bl	8000558 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004de:	f000 f941 	bl	8000764 <MX_GPIO_Init>
  MX_DMA_Init();
 80004e2:	f000 f91f 	bl	8000724 <MX_DMA_Init>
  MX_UART4_Init();
 80004e6:	f000 f8f3 	bl	80006d0 <MX_UART4_Init>
  MX_ADC1_Init();
 80004ea:	f000 f89f 	bl	800062c <MX_ADC1_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	    HAL_ADC_Start(&hadc1);
 80004ee:	4818      	ldr	r0, [pc, #96]	; (8000550 <main+0x84>)
 80004f0:	f000 fbb4 	bl	8000c5c <HAL_ADC_Start>
	    if (HAL_ADC_PollForConversion(&hadc1, 100) == HAL_OK)
 80004f4:	2164      	movs	r1, #100	; 0x64
 80004f6:	4816      	ldr	r0, [pc, #88]	; (8000550 <main+0x84>)
 80004f8:	f000 fcb5 	bl	8000e66 <HAL_ADC_PollForConversion>
 80004fc:	4603      	mov	r3, r0
 80004fe:	2b00      	cmp	r3, #0
 8000500:	d103      	bne.n	800050a <main+0x3e>
	    {
	      potValue = HAL_ADC_GetValue(&hadc1);
 8000502:	4813      	ldr	r0, [pc, #76]	; (8000550 <main+0x84>)
 8000504:	f000 fd3a 	bl	8000f7c <HAL_ADC_GetValue>
 8000508:	60f8      	str	r0, [r7, #12]
	    }
	    HAL_ADC_Stop(&hadc1);
 800050a:	4811      	ldr	r0, [pc, #68]	; (8000550 <main+0x84>)
 800050c:	f000 fc78 	bl	8000e00 <HAL_ADC_Stop>

	    // Map Potentiometer Value to Speed
	    uint8_t motorSpeed = (uint8_t)(potValue / 16);  // Map the potentiometer value to motor speed range
 8000510:	68fb      	ldr	r3, [r7, #12]
 8000512:	091b      	lsrs	r3, r3, #4
 8000514:	72fb      	strb	r3, [r7, #11]
	    												// 12-bit ADC resolution
	    												// 3.3V reference Voltage
	    // Set motor speeds
	    uint8_t setSpeed1Cmd[] = {0x00, 0x31, motorSpeed};         // SET SPEED 1 command
 8000516:	2300      	movs	r3, #0
 8000518:	723b      	strb	r3, [r7, #8]
 800051a:	2331      	movs	r3, #49	; 0x31
 800051c:	727b      	strb	r3, [r7, #9]
 800051e:	7afb      	ldrb	r3, [r7, #11]
 8000520:	72bb      	strb	r3, [r7, #10]
	    uint8_t setSpeed2Cmd[] = {0x00, 0x32, motorSpeed};         // SET SPEED 2 command
 8000522:	2300      	movs	r3, #0
 8000524:	713b      	strb	r3, [r7, #4]
 8000526:	2332      	movs	r3, #50	; 0x32
 8000528:	717b      	strb	r3, [r7, #5]
 800052a:	7afb      	ldrb	r3, [r7, #11]
 800052c:	71bb      	strb	r3, [r7, #6]

	    HAL_UART_Transmit(&huart4, setSpeed1Cmd, sizeof(setSpeed1Cmd), HAL_MAX_DELAY);
 800052e:	f107 0108 	add.w	r1, r7, #8
 8000532:	f04f 33ff 	mov.w	r3, #4294967295
 8000536:	2203      	movs	r2, #3
 8000538:	4806      	ldr	r0, [pc, #24]	; (8000554 <main+0x88>)
 800053a:	f002 fa5a 	bl	80029f2 <HAL_UART_Transmit>
	    HAL_UART_Transmit(&huart4, setSpeed2Cmd, sizeof(setSpeed2Cmd), HAL_MAX_DELAY);
 800053e:	1d39      	adds	r1, r7, #4
 8000540:	f04f 33ff 	mov.w	r3, #4294967295
 8000544:	2203      	movs	r2, #3
 8000546:	4803      	ldr	r0, [pc, #12]	; (8000554 <main+0x88>)
 8000548:	f002 fa53 	bl	80029f2 <HAL_UART_Transmit>
  {
 800054c:	e7cf      	b.n	80004ee <main+0x22>
 800054e:	bf00      	nop
 8000550:	20000028 	.word	0x20000028
 8000554:	20000070 	.word	0x20000070

08000558 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000558:	b580      	push	{r7, lr}
 800055a:	b094      	sub	sp, #80	; 0x50
 800055c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800055e:	f107 0320 	add.w	r3, r7, #32
 8000562:	2230      	movs	r2, #48	; 0x30
 8000564:	2100      	movs	r1, #0
 8000566:	4618      	mov	r0, r3
 8000568:	f003 fa2e 	bl	80039c8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800056c:	f107 030c 	add.w	r3, r7, #12
 8000570:	2200      	movs	r2, #0
 8000572:	601a      	str	r2, [r3, #0]
 8000574:	605a      	str	r2, [r3, #4]
 8000576:	609a      	str	r2, [r3, #8]
 8000578:	60da      	str	r2, [r3, #12]
 800057a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800057c:	2300      	movs	r3, #0
 800057e:	60bb      	str	r3, [r7, #8]
 8000580:	4b28      	ldr	r3, [pc, #160]	; (8000624 <SystemClock_Config+0xcc>)
 8000582:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000584:	4a27      	ldr	r2, [pc, #156]	; (8000624 <SystemClock_Config+0xcc>)
 8000586:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800058a:	6413      	str	r3, [r2, #64]	; 0x40
 800058c:	4b25      	ldr	r3, [pc, #148]	; (8000624 <SystemClock_Config+0xcc>)
 800058e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000590:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000594:	60bb      	str	r3, [r7, #8]
 8000596:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000598:	2300      	movs	r3, #0
 800059a:	607b      	str	r3, [r7, #4]
 800059c:	4b22      	ldr	r3, [pc, #136]	; (8000628 <SystemClock_Config+0xd0>)
 800059e:	681b      	ldr	r3, [r3, #0]
 80005a0:	4a21      	ldr	r2, [pc, #132]	; (8000628 <SystemClock_Config+0xd0>)
 80005a2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005a6:	6013      	str	r3, [r2, #0]
 80005a8:	4b1f      	ldr	r3, [pc, #124]	; (8000628 <SystemClock_Config+0xd0>)
 80005aa:	681b      	ldr	r3, [r3, #0]
 80005ac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80005b0:	607b      	str	r3, [r7, #4]
 80005b2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005b4:	2302      	movs	r3, #2
 80005b6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005b8:	2301      	movs	r3, #1
 80005ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005bc:	2310      	movs	r3, #16
 80005be:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005c0:	2302      	movs	r3, #2
 80005c2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005c4:	2300      	movs	r3, #0
 80005c6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80005c8:	2308      	movs	r3, #8
 80005ca:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80005cc:	23a8      	movs	r3, #168	; 0xa8
 80005ce:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005d0:	2302      	movs	r3, #2
 80005d2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80005d4:	2307      	movs	r3, #7
 80005d6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005d8:	f107 0320 	add.w	r3, r7, #32
 80005dc:	4618      	mov	r0, r3
 80005de:	f001 fd23 	bl	8002028 <HAL_RCC_OscConfig>
 80005e2:	4603      	mov	r3, r0
 80005e4:	2b00      	cmp	r3, #0
 80005e6:	d001      	beq.n	80005ec <SystemClock_Config+0x94>
  {
    Error_Handler();
 80005e8:	f000 f8f2 	bl	80007d0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005ec:	230f      	movs	r3, #15
 80005ee:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005f0:	2302      	movs	r3, #2
 80005f2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005f4:	2300      	movs	r3, #0
 80005f6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80005f8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80005fc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80005fe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000602:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000604:	f107 030c 	add.w	r3, r7, #12
 8000608:	2105      	movs	r1, #5
 800060a:	4618      	mov	r0, r3
 800060c:	f001 ff84 	bl	8002518 <HAL_RCC_ClockConfig>
 8000610:	4603      	mov	r3, r0
 8000612:	2b00      	cmp	r3, #0
 8000614:	d001      	beq.n	800061a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000616:	f000 f8db 	bl	80007d0 <Error_Handler>
  }
}
 800061a:	bf00      	nop
 800061c:	3750      	adds	r7, #80	; 0x50
 800061e:	46bd      	mov	sp, r7
 8000620:	bd80      	pop	{r7, pc}
 8000622:	bf00      	nop
 8000624:	40023800 	.word	0x40023800
 8000628:	40007000 	.word	0x40007000

0800062c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	b084      	sub	sp, #16
 8000630:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000632:	463b      	mov	r3, r7
 8000634:	2200      	movs	r2, #0
 8000636:	601a      	str	r2, [r3, #0]
 8000638:	605a      	str	r2, [r3, #4]
 800063a:	609a      	str	r2, [r3, #8]
 800063c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800063e:	4b21      	ldr	r3, [pc, #132]	; (80006c4 <MX_ADC1_Init+0x98>)
 8000640:	4a21      	ldr	r2, [pc, #132]	; (80006c8 <MX_ADC1_Init+0x9c>)
 8000642:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000644:	4b1f      	ldr	r3, [pc, #124]	; (80006c4 <MX_ADC1_Init+0x98>)
 8000646:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800064a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800064c:	4b1d      	ldr	r3, [pc, #116]	; (80006c4 <MX_ADC1_Init+0x98>)
 800064e:	2200      	movs	r2, #0
 8000650:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000652:	4b1c      	ldr	r3, [pc, #112]	; (80006c4 <MX_ADC1_Init+0x98>)
 8000654:	2200      	movs	r2, #0
 8000656:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000658:	4b1a      	ldr	r3, [pc, #104]	; (80006c4 <MX_ADC1_Init+0x98>)
 800065a:	2200      	movs	r2, #0
 800065c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800065e:	4b19      	ldr	r3, [pc, #100]	; (80006c4 <MX_ADC1_Init+0x98>)
 8000660:	2200      	movs	r2, #0
 8000662:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000666:	4b17      	ldr	r3, [pc, #92]	; (80006c4 <MX_ADC1_Init+0x98>)
 8000668:	2200      	movs	r2, #0
 800066a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800066c:	4b15      	ldr	r3, [pc, #84]	; (80006c4 <MX_ADC1_Init+0x98>)
 800066e:	4a17      	ldr	r2, [pc, #92]	; (80006cc <MX_ADC1_Init+0xa0>)
 8000670:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000672:	4b14      	ldr	r3, [pc, #80]	; (80006c4 <MX_ADC1_Init+0x98>)
 8000674:	2200      	movs	r2, #0
 8000676:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000678:	4b12      	ldr	r3, [pc, #72]	; (80006c4 <MX_ADC1_Init+0x98>)
 800067a:	2201      	movs	r2, #1
 800067c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800067e:	4b11      	ldr	r3, [pc, #68]	; (80006c4 <MX_ADC1_Init+0x98>)
 8000680:	2200      	movs	r2, #0
 8000682:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000686:	4b0f      	ldr	r3, [pc, #60]	; (80006c4 <MX_ADC1_Init+0x98>)
 8000688:	2201      	movs	r2, #1
 800068a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800068c:	480d      	ldr	r0, [pc, #52]	; (80006c4 <MX_ADC1_Init+0x98>)
 800068e:	f000 faa1 	bl	8000bd4 <HAL_ADC_Init>
 8000692:	4603      	mov	r3, r0
 8000694:	2b00      	cmp	r3, #0
 8000696:	d001      	beq.n	800069c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000698:	f000 f89a 	bl	80007d0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800069c:	2300      	movs	r3, #0
 800069e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80006a0:	2301      	movs	r3, #1
 80006a2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80006a4:	2300      	movs	r3, #0
 80006a6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006a8:	463b      	mov	r3, r7
 80006aa:	4619      	mov	r1, r3
 80006ac:	4805      	ldr	r0, [pc, #20]	; (80006c4 <MX_ADC1_Init+0x98>)
 80006ae:	f000 fc73 	bl	8000f98 <HAL_ADC_ConfigChannel>
 80006b2:	4603      	mov	r3, r0
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	d001      	beq.n	80006bc <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80006b8:	f000 f88a 	bl	80007d0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80006bc:	bf00      	nop
 80006be:	3710      	adds	r7, #16
 80006c0:	46bd      	mov	sp, r7
 80006c2:	bd80      	pop	{r7, pc}
 80006c4:	20000028 	.word	0x20000028
 80006c8:	40012000 	.word	0x40012000
 80006cc:	0f000001 	.word	0x0f000001

080006d0 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 80006d4:	4b11      	ldr	r3, [pc, #68]	; (800071c <MX_UART4_Init+0x4c>)
 80006d6:	4a12      	ldr	r2, [pc, #72]	; (8000720 <MX_UART4_Init+0x50>)
 80006d8:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 38400;
 80006da:	4b10      	ldr	r3, [pc, #64]	; (800071c <MX_UART4_Init+0x4c>)
 80006dc:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 80006e0:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80006e2:	4b0e      	ldr	r3, [pc, #56]	; (800071c <MX_UART4_Init+0x4c>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_2;
 80006e8:	4b0c      	ldr	r3, [pc, #48]	; (800071c <MX_UART4_Init+0x4c>)
 80006ea:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80006ee:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80006f0:	4b0a      	ldr	r3, [pc, #40]	; (800071c <MX_UART4_Init+0x4c>)
 80006f2:	2200      	movs	r2, #0
 80006f4:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80006f6:	4b09      	ldr	r3, [pc, #36]	; (800071c <MX_UART4_Init+0x4c>)
 80006f8:	220c      	movs	r2, #12
 80006fa:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006fc:	4b07      	ldr	r3, [pc, #28]	; (800071c <MX_UART4_Init+0x4c>)
 80006fe:	2200      	movs	r2, #0
 8000700:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000702:	4b06      	ldr	r3, [pc, #24]	; (800071c <MX_UART4_Init+0x4c>)
 8000704:	2200      	movs	r2, #0
 8000706:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000708:	4804      	ldr	r0, [pc, #16]	; (800071c <MX_UART4_Init+0x4c>)
 800070a:	f002 f925 	bl	8002958 <HAL_UART_Init>
 800070e:	4603      	mov	r3, r0
 8000710:	2b00      	cmp	r3, #0
 8000712:	d001      	beq.n	8000718 <MX_UART4_Init+0x48>
  {
    Error_Handler();
 8000714:	f000 f85c 	bl	80007d0 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8000718:	bf00      	nop
 800071a:	bd80      	pop	{r7, pc}
 800071c:	20000070 	.word	0x20000070
 8000720:	40004c00 	.word	0x40004c00

08000724 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	b082      	sub	sp, #8
 8000728:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800072a:	2300      	movs	r3, #0
 800072c:	607b      	str	r3, [r7, #4]
 800072e:	4b0c      	ldr	r3, [pc, #48]	; (8000760 <MX_DMA_Init+0x3c>)
 8000730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000732:	4a0b      	ldr	r2, [pc, #44]	; (8000760 <MX_DMA_Init+0x3c>)
 8000734:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000738:	6313      	str	r3, [r2, #48]	; 0x30
 800073a:	4b09      	ldr	r3, [pc, #36]	; (8000760 <MX_DMA_Init+0x3c>)
 800073c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800073e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000742:	607b      	str	r3, [r7, #4]
 8000744:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 8000746:	2200      	movs	r2, #0
 8000748:	2100      	movs	r1, #0
 800074a:	200d      	movs	r0, #13
 800074c:	f000 ff1d 	bl	800158a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8000750:	200d      	movs	r0, #13
 8000752:	f000 ff36 	bl	80015c2 <HAL_NVIC_EnableIRQ>

}
 8000756:	bf00      	nop
 8000758:	3708      	adds	r7, #8
 800075a:	46bd      	mov	sp, r7
 800075c:	bd80      	pop	{r7, pc}
 800075e:	bf00      	nop
 8000760:	40023800 	.word	0x40023800

08000764 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000764:	b480      	push	{r7}
 8000766:	b085      	sub	sp, #20
 8000768:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800076a:	2300      	movs	r3, #0
 800076c:	60fb      	str	r3, [r7, #12]
 800076e:	4b17      	ldr	r3, [pc, #92]	; (80007cc <MX_GPIO_Init+0x68>)
 8000770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000772:	4a16      	ldr	r2, [pc, #88]	; (80007cc <MX_GPIO_Init+0x68>)
 8000774:	f043 0304 	orr.w	r3, r3, #4
 8000778:	6313      	str	r3, [r2, #48]	; 0x30
 800077a:	4b14      	ldr	r3, [pc, #80]	; (80007cc <MX_GPIO_Init+0x68>)
 800077c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800077e:	f003 0304 	and.w	r3, r3, #4
 8000782:	60fb      	str	r3, [r7, #12]
 8000784:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000786:	2300      	movs	r3, #0
 8000788:	60bb      	str	r3, [r7, #8]
 800078a:	4b10      	ldr	r3, [pc, #64]	; (80007cc <MX_GPIO_Init+0x68>)
 800078c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800078e:	4a0f      	ldr	r2, [pc, #60]	; (80007cc <MX_GPIO_Init+0x68>)
 8000790:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000794:	6313      	str	r3, [r2, #48]	; 0x30
 8000796:	4b0d      	ldr	r3, [pc, #52]	; (80007cc <MX_GPIO_Init+0x68>)
 8000798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800079a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800079e:	60bb      	str	r3, [r7, #8]
 80007a0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007a2:	2300      	movs	r3, #0
 80007a4:	607b      	str	r3, [r7, #4]
 80007a6:	4b09      	ldr	r3, [pc, #36]	; (80007cc <MX_GPIO_Init+0x68>)
 80007a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007aa:	4a08      	ldr	r2, [pc, #32]	; (80007cc <MX_GPIO_Init+0x68>)
 80007ac:	f043 0301 	orr.w	r3, r3, #1
 80007b0:	6313      	str	r3, [r2, #48]	; 0x30
 80007b2:	4b06      	ldr	r3, [pc, #24]	; (80007cc <MX_GPIO_Init+0x68>)
 80007b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b6:	f003 0301 	and.w	r3, r3, #1
 80007ba:	607b      	str	r3, [r7, #4]
 80007bc:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80007be:	bf00      	nop
 80007c0:	3714      	adds	r7, #20
 80007c2:	46bd      	mov	sp, r7
 80007c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c8:	4770      	bx	lr
 80007ca:	bf00      	nop
 80007cc:	40023800 	.word	0x40023800

080007d0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007d0:	b480      	push	{r7}
 80007d2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007d4:	b672      	cpsid	i
}
 80007d6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007d8:	e7fe      	b.n	80007d8 <Error_Handler+0x8>
	...

080007dc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	b082      	sub	sp, #8
 80007e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007e2:	2300      	movs	r3, #0
 80007e4:	607b      	str	r3, [r7, #4]
 80007e6:	4b10      	ldr	r3, [pc, #64]	; (8000828 <HAL_MspInit+0x4c>)
 80007e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007ea:	4a0f      	ldr	r2, [pc, #60]	; (8000828 <HAL_MspInit+0x4c>)
 80007ec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007f0:	6453      	str	r3, [r2, #68]	; 0x44
 80007f2:	4b0d      	ldr	r3, [pc, #52]	; (8000828 <HAL_MspInit+0x4c>)
 80007f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80007fa:	607b      	str	r3, [r7, #4]
 80007fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007fe:	2300      	movs	r3, #0
 8000800:	603b      	str	r3, [r7, #0]
 8000802:	4b09      	ldr	r3, [pc, #36]	; (8000828 <HAL_MspInit+0x4c>)
 8000804:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000806:	4a08      	ldr	r2, [pc, #32]	; (8000828 <HAL_MspInit+0x4c>)
 8000808:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800080c:	6413      	str	r3, [r2, #64]	; 0x40
 800080e:	4b06      	ldr	r3, [pc, #24]	; (8000828 <HAL_MspInit+0x4c>)
 8000810:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000812:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000816:	603b      	str	r3, [r7, #0]
 8000818:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800081a:	2007      	movs	r0, #7
 800081c:	f000 feaa 	bl	8001574 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000820:	bf00      	nop
 8000822:	3708      	adds	r7, #8
 8000824:	46bd      	mov	sp, r7
 8000826:	bd80      	pop	{r7, pc}
 8000828:	40023800 	.word	0x40023800

0800082c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	b08a      	sub	sp, #40	; 0x28
 8000830:	af00      	add	r7, sp, #0
 8000832:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000834:	f107 0314 	add.w	r3, r7, #20
 8000838:	2200      	movs	r2, #0
 800083a:	601a      	str	r2, [r3, #0]
 800083c:	605a      	str	r2, [r3, #4]
 800083e:	609a      	str	r2, [r3, #8]
 8000840:	60da      	str	r2, [r3, #12]
 8000842:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	681b      	ldr	r3, [r3, #0]
 8000848:	4a17      	ldr	r2, [pc, #92]	; (80008a8 <HAL_ADC_MspInit+0x7c>)
 800084a:	4293      	cmp	r3, r2
 800084c:	d127      	bne.n	800089e <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800084e:	2300      	movs	r3, #0
 8000850:	613b      	str	r3, [r7, #16]
 8000852:	4b16      	ldr	r3, [pc, #88]	; (80008ac <HAL_ADC_MspInit+0x80>)
 8000854:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000856:	4a15      	ldr	r2, [pc, #84]	; (80008ac <HAL_ADC_MspInit+0x80>)
 8000858:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800085c:	6453      	str	r3, [r2, #68]	; 0x44
 800085e:	4b13      	ldr	r3, [pc, #76]	; (80008ac <HAL_ADC_MspInit+0x80>)
 8000860:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000862:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000866:	613b      	str	r3, [r7, #16]
 8000868:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800086a:	2300      	movs	r3, #0
 800086c:	60fb      	str	r3, [r7, #12]
 800086e:	4b0f      	ldr	r3, [pc, #60]	; (80008ac <HAL_ADC_MspInit+0x80>)
 8000870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000872:	4a0e      	ldr	r2, [pc, #56]	; (80008ac <HAL_ADC_MspInit+0x80>)
 8000874:	f043 0301 	orr.w	r3, r3, #1
 8000878:	6313      	str	r3, [r2, #48]	; 0x30
 800087a:	4b0c      	ldr	r3, [pc, #48]	; (80008ac <HAL_ADC_MspInit+0x80>)
 800087c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800087e:	f003 0301 	and.w	r3, r3, #1
 8000882:	60fb      	str	r3, [r7, #12]
 8000884:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000886:	2301      	movs	r3, #1
 8000888:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800088a:	2303      	movs	r3, #3
 800088c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800088e:	2300      	movs	r3, #0
 8000890:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000892:	f107 0314 	add.w	r3, r7, #20
 8000896:	4619      	mov	r1, r3
 8000898:	4805      	ldr	r0, [pc, #20]	; (80008b0 <HAL_ADC_MspInit+0x84>)
 800089a:	f001 fa29 	bl	8001cf0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800089e:	bf00      	nop
 80008a0:	3728      	adds	r7, #40	; 0x28
 80008a2:	46bd      	mov	sp, r7
 80008a4:	bd80      	pop	{r7, pc}
 80008a6:	bf00      	nop
 80008a8:	40012000 	.word	0x40012000
 80008ac:	40023800 	.word	0x40023800
 80008b0:	40020000 	.word	0x40020000

080008b4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b08a      	sub	sp, #40	; 0x28
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008bc:	f107 0314 	add.w	r3, r7, #20
 80008c0:	2200      	movs	r2, #0
 80008c2:	601a      	str	r2, [r3, #0]
 80008c4:	605a      	str	r2, [r3, #4]
 80008c6:	609a      	str	r2, [r3, #8]
 80008c8:	60da      	str	r2, [r3, #12]
 80008ca:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	681b      	ldr	r3, [r3, #0]
 80008d0:	4a44      	ldr	r2, [pc, #272]	; (80009e4 <HAL_UART_MspInit+0x130>)
 80008d2:	4293      	cmp	r3, r2
 80008d4:	f040 8082 	bne.w	80009dc <HAL_UART_MspInit+0x128>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80008d8:	2300      	movs	r3, #0
 80008da:	613b      	str	r3, [r7, #16]
 80008dc:	4b42      	ldr	r3, [pc, #264]	; (80009e8 <HAL_UART_MspInit+0x134>)
 80008de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008e0:	4a41      	ldr	r2, [pc, #260]	; (80009e8 <HAL_UART_MspInit+0x134>)
 80008e2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80008e6:	6413      	str	r3, [r2, #64]	; 0x40
 80008e8:	4b3f      	ldr	r3, [pc, #252]	; (80009e8 <HAL_UART_MspInit+0x134>)
 80008ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008ec:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80008f0:	613b      	str	r3, [r7, #16]
 80008f2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008f4:	2300      	movs	r3, #0
 80008f6:	60fb      	str	r3, [r7, #12]
 80008f8:	4b3b      	ldr	r3, [pc, #236]	; (80009e8 <HAL_UART_MspInit+0x134>)
 80008fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008fc:	4a3a      	ldr	r2, [pc, #232]	; (80009e8 <HAL_UART_MspInit+0x134>)
 80008fe:	f043 0301 	orr.w	r3, r3, #1
 8000902:	6313      	str	r3, [r2, #48]	; 0x30
 8000904:	4b38      	ldr	r3, [pc, #224]	; (80009e8 <HAL_UART_MspInit+0x134>)
 8000906:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000908:	f003 0301 	and.w	r3, r3, #1
 800090c:	60fb      	str	r3, [r7, #12]
 800090e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000910:	2300      	movs	r3, #0
 8000912:	60bb      	str	r3, [r7, #8]
 8000914:	4b34      	ldr	r3, [pc, #208]	; (80009e8 <HAL_UART_MspInit+0x134>)
 8000916:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000918:	4a33      	ldr	r2, [pc, #204]	; (80009e8 <HAL_UART_MspInit+0x134>)
 800091a:	f043 0304 	orr.w	r3, r3, #4
 800091e:	6313      	str	r3, [r2, #48]	; 0x30
 8000920:	4b31      	ldr	r3, [pc, #196]	; (80009e8 <HAL_UART_MspInit+0x134>)
 8000922:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000924:	f003 0304 	and.w	r3, r3, #4
 8000928:	60bb      	str	r3, [r7, #8]
 800092a:	68bb      	ldr	r3, [r7, #8]
    /**UART4 GPIO Configuration
    PA1     ------> UART4_RX
    PC10     ------> UART4_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800092c:	2302      	movs	r3, #2
 800092e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000930:	2302      	movs	r3, #2
 8000932:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000934:	2300      	movs	r3, #0
 8000936:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000938:	2303      	movs	r3, #3
 800093a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800093c:	2308      	movs	r3, #8
 800093e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000940:	f107 0314 	add.w	r3, r7, #20
 8000944:	4619      	mov	r1, r3
 8000946:	4829      	ldr	r0, [pc, #164]	; (80009ec <HAL_UART_MspInit+0x138>)
 8000948:	f001 f9d2 	bl	8001cf0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800094c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000950:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000952:	2302      	movs	r3, #2
 8000954:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000956:	2300      	movs	r3, #0
 8000958:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800095a:	2303      	movs	r3, #3
 800095c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800095e:	2308      	movs	r3, #8
 8000960:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000962:	f107 0314 	add.w	r3, r7, #20
 8000966:	4619      	mov	r1, r3
 8000968:	4821      	ldr	r0, [pc, #132]	; (80009f0 <HAL_UART_MspInit+0x13c>)
 800096a:	f001 f9c1 	bl	8001cf0 <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA1_Stream2;
 800096e:	4b21      	ldr	r3, [pc, #132]	; (80009f4 <HAL_UART_MspInit+0x140>)
 8000970:	4a21      	ldr	r2, [pc, #132]	; (80009f8 <HAL_UART_MspInit+0x144>)
 8000972:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Channel = DMA_CHANNEL_4;
 8000974:	4b1f      	ldr	r3, [pc, #124]	; (80009f4 <HAL_UART_MspInit+0x140>)
 8000976:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800097a:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800097c:	4b1d      	ldr	r3, [pc, #116]	; (80009f4 <HAL_UART_MspInit+0x140>)
 800097e:	2200      	movs	r2, #0
 8000980:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000982:	4b1c      	ldr	r3, [pc, #112]	; (80009f4 <HAL_UART_MspInit+0x140>)
 8000984:	2200      	movs	r2, #0
 8000986:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000988:	4b1a      	ldr	r3, [pc, #104]	; (80009f4 <HAL_UART_MspInit+0x140>)
 800098a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800098e:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000990:	4b18      	ldr	r3, [pc, #96]	; (80009f4 <HAL_UART_MspInit+0x140>)
 8000992:	2200      	movs	r2, #0
 8000994:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000996:	4b17      	ldr	r3, [pc, #92]	; (80009f4 <HAL_UART_MspInit+0x140>)
 8000998:	2200      	movs	r2, #0
 800099a:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_CIRCULAR;
 800099c:	4b15      	ldr	r3, [pc, #84]	; (80009f4 <HAL_UART_MspInit+0x140>)
 800099e:	f44f 7280 	mov.w	r2, #256	; 0x100
 80009a2:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 80009a4:	4b13      	ldr	r3, [pc, #76]	; (80009f4 <HAL_UART_MspInit+0x140>)
 80009a6:	2200      	movs	r2, #0
 80009a8:	621a      	str	r2, [r3, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80009aa:	4b12      	ldr	r3, [pc, #72]	; (80009f4 <HAL_UART_MspInit+0x140>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 80009b0:	4810      	ldr	r0, [pc, #64]	; (80009f4 <HAL_UART_MspInit+0x140>)
 80009b2:	f000 fe21 	bl	80015f8 <HAL_DMA_Init>
 80009b6:	4603      	mov	r3, r0
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	d001      	beq.n	80009c0 <HAL_UART_MspInit+0x10c>
    {
      Error_Handler();
 80009bc:	f7ff ff08 	bl	80007d0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_uart4_rx);
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	4a0c      	ldr	r2, [pc, #48]	; (80009f4 <HAL_UART_MspInit+0x140>)
 80009c4:	639a      	str	r2, [r3, #56]	; 0x38
 80009c6:	4a0b      	ldr	r2, [pc, #44]	; (80009f4 <HAL_UART_MspInit+0x140>)
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 80009cc:	2200      	movs	r2, #0
 80009ce:	2100      	movs	r1, #0
 80009d0:	2034      	movs	r0, #52	; 0x34
 80009d2:	f000 fdda 	bl	800158a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 80009d6:	2034      	movs	r0, #52	; 0x34
 80009d8:	f000 fdf3 	bl	80015c2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }

}
 80009dc:	bf00      	nop
 80009de:	3728      	adds	r7, #40	; 0x28
 80009e0:	46bd      	mov	sp, r7
 80009e2:	bd80      	pop	{r7, pc}
 80009e4:	40004c00 	.word	0x40004c00
 80009e8:	40023800 	.word	0x40023800
 80009ec:	40020000 	.word	0x40020000
 80009f0:	40020800 	.word	0x40020800
 80009f4:	200000b4 	.word	0x200000b4
 80009f8:	40026040 	.word	0x40026040

080009fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009fc:	b480      	push	{r7}
 80009fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a00:	e7fe      	b.n	8000a00 <NMI_Handler+0x4>

08000a02 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a02:	b480      	push	{r7}
 8000a04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a06:	e7fe      	b.n	8000a06 <HardFault_Handler+0x4>

08000a08 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a08:	b480      	push	{r7}
 8000a0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a0c:	e7fe      	b.n	8000a0c <MemManage_Handler+0x4>

08000a0e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a0e:	b480      	push	{r7}
 8000a10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a12:	e7fe      	b.n	8000a12 <BusFault_Handler+0x4>

08000a14 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a14:	b480      	push	{r7}
 8000a16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a18:	e7fe      	b.n	8000a18 <UsageFault_Handler+0x4>

08000a1a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a1a:	b480      	push	{r7}
 8000a1c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a1e:	bf00      	nop
 8000a20:	46bd      	mov	sp, r7
 8000a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a26:	4770      	bx	lr

08000a28 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a28:	b480      	push	{r7}
 8000a2a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a2c:	bf00      	nop
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a34:	4770      	bx	lr

08000a36 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a36:	b480      	push	{r7}
 8000a38:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a3a:	bf00      	nop
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a42:	4770      	bx	lr

08000a44 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a48:	f000 f8a4 	bl	8000b94 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a4c:	bf00      	nop
 8000a4e:	bd80      	pop	{r7, pc}

08000a50 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 8000a54:	4802      	ldr	r0, [pc, #8]	; (8000a60 <DMA1_Stream2_IRQHandler+0x10>)
 8000a56:	f000 ff0f 	bl	8001878 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8000a5a:	bf00      	nop
 8000a5c:	bd80      	pop	{r7, pc}
 8000a5e:	bf00      	nop
 8000a60:	200000b4 	.word	0x200000b4

08000a64 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8000a68:	4802      	ldr	r0, [pc, #8]	; (8000a74 <UART4_IRQHandler+0x10>)
 8000a6a:	f002 f855 	bl	8002b18 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8000a6e:	bf00      	nop
 8000a70:	bd80      	pop	{r7, pc}
 8000a72:	bf00      	nop
 8000a74:	20000070 	.word	0x20000070

08000a78 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a78:	b480      	push	{r7}
 8000a7a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a7c:	4b06      	ldr	r3, [pc, #24]	; (8000a98 <SystemInit+0x20>)
 8000a7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a82:	4a05      	ldr	r2, [pc, #20]	; (8000a98 <SystemInit+0x20>)
 8000a84:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a88:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a8c:	bf00      	nop
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a94:	4770      	bx	lr
 8000a96:	bf00      	nop
 8000a98:	e000ed00 	.word	0xe000ed00

08000a9c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000a9c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ad4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000aa0:	480d      	ldr	r0, [pc, #52]	; (8000ad8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000aa2:	490e      	ldr	r1, [pc, #56]	; (8000adc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000aa4:	4a0e      	ldr	r2, [pc, #56]	; (8000ae0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000aa6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000aa8:	e002      	b.n	8000ab0 <LoopCopyDataInit>

08000aaa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000aaa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000aac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000aae:	3304      	adds	r3, #4

08000ab0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ab0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ab2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ab4:	d3f9      	bcc.n	8000aaa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ab6:	4a0b      	ldr	r2, [pc, #44]	; (8000ae4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000ab8:	4c0b      	ldr	r4, [pc, #44]	; (8000ae8 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000aba:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000abc:	e001      	b.n	8000ac2 <LoopFillZerobss>

08000abe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000abe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ac0:	3204      	adds	r2, #4

08000ac2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ac2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ac4:	d3fb      	bcc.n	8000abe <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000ac6:	f7ff ffd7 	bl	8000a78 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000aca:	f002 ff59 	bl	8003980 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ace:	f7ff fcfd 	bl	80004cc <main>
  bx  lr    
 8000ad2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000ad4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000ad8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000adc:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000ae0:	08003a20 	.word	0x08003a20
  ldr r2, =_sbss
 8000ae4:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000ae8:	20000118 	.word	0x20000118

08000aec <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000aec:	e7fe      	b.n	8000aec <ADC_IRQHandler>
	...

08000af0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000af4:	4b0e      	ldr	r3, [pc, #56]	; (8000b30 <HAL_Init+0x40>)
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	4a0d      	ldr	r2, [pc, #52]	; (8000b30 <HAL_Init+0x40>)
 8000afa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000afe:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000b00:	4b0b      	ldr	r3, [pc, #44]	; (8000b30 <HAL_Init+0x40>)
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	4a0a      	ldr	r2, [pc, #40]	; (8000b30 <HAL_Init+0x40>)
 8000b06:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000b0a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b0c:	4b08      	ldr	r3, [pc, #32]	; (8000b30 <HAL_Init+0x40>)
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	4a07      	ldr	r2, [pc, #28]	; (8000b30 <HAL_Init+0x40>)
 8000b12:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b16:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b18:	2003      	movs	r0, #3
 8000b1a:	f000 fd2b 	bl	8001574 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b1e:	2000      	movs	r0, #0
 8000b20:	f000 f808 	bl	8000b34 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b24:	f7ff fe5a 	bl	80007dc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b28:	2300      	movs	r3, #0
}
 8000b2a:	4618      	mov	r0, r3
 8000b2c:	bd80      	pop	{r7, pc}
 8000b2e:	bf00      	nop
 8000b30:	40023c00 	.word	0x40023c00

08000b34 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b082      	sub	sp, #8
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b3c:	4b12      	ldr	r3, [pc, #72]	; (8000b88 <HAL_InitTick+0x54>)
 8000b3e:	681a      	ldr	r2, [r3, #0]
 8000b40:	4b12      	ldr	r3, [pc, #72]	; (8000b8c <HAL_InitTick+0x58>)
 8000b42:	781b      	ldrb	r3, [r3, #0]
 8000b44:	4619      	mov	r1, r3
 8000b46:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b4a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b52:	4618      	mov	r0, r3
 8000b54:	f000 fd43 	bl	80015de <HAL_SYSTICK_Config>
 8000b58:	4603      	mov	r3, r0
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	d001      	beq.n	8000b62 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000b5e:	2301      	movs	r3, #1
 8000b60:	e00e      	b.n	8000b80 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	2b0f      	cmp	r3, #15
 8000b66:	d80a      	bhi.n	8000b7e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b68:	2200      	movs	r2, #0
 8000b6a:	6879      	ldr	r1, [r7, #4]
 8000b6c:	f04f 30ff 	mov.w	r0, #4294967295
 8000b70:	f000 fd0b 	bl	800158a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b74:	4a06      	ldr	r2, [pc, #24]	; (8000b90 <HAL_InitTick+0x5c>)
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	e000      	b.n	8000b80 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b7e:	2301      	movs	r3, #1
}
 8000b80:	4618      	mov	r0, r3
 8000b82:	3708      	adds	r7, #8
 8000b84:	46bd      	mov	sp, r7
 8000b86:	bd80      	pop	{r7, pc}
 8000b88:	20000000 	.word	0x20000000
 8000b8c:	20000008 	.word	0x20000008
 8000b90:	20000004 	.word	0x20000004

08000b94 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b94:	b480      	push	{r7}
 8000b96:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b98:	4b06      	ldr	r3, [pc, #24]	; (8000bb4 <HAL_IncTick+0x20>)
 8000b9a:	781b      	ldrb	r3, [r3, #0]
 8000b9c:	461a      	mov	r2, r3
 8000b9e:	4b06      	ldr	r3, [pc, #24]	; (8000bb8 <HAL_IncTick+0x24>)
 8000ba0:	681b      	ldr	r3, [r3, #0]
 8000ba2:	4413      	add	r3, r2
 8000ba4:	4a04      	ldr	r2, [pc, #16]	; (8000bb8 <HAL_IncTick+0x24>)
 8000ba6:	6013      	str	r3, [r2, #0]
}
 8000ba8:	bf00      	nop
 8000baa:	46bd      	mov	sp, r7
 8000bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb0:	4770      	bx	lr
 8000bb2:	bf00      	nop
 8000bb4:	20000008 	.word	0x20000008
 8000bb8:	20000114 	.word	0x20000114

08000bbc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000bbc:	b480      	push	{r7}
 8000bbe:	af00      	add	r7, sp, #0
  return uwTick;
 8000bc0:	4b03      	ldr	r3, [pc, #12]	; (8000bd0 <HAL_GetTick+0x14>)
 8000bc2:	681b      	ldr	r3, [r3, #0]
}
 8000bc4:	4618      	mov	r0, r3
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bcc:	4770      	bx	lr
 8000bce:	bf00      	nop
 8000bd0:	20000114 	.word	0x20000114

08000bd4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b084      	sub	sp, #16
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000bdc:	2300      	movs	r3, #0
 8000bde:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d101      	bne.n	8000bea <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8000be6:	2301      	movs	r3, #1
 8000be8:	e033      	b.n	8000c52 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d109      	bne.n	8000c06 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000bf2:	6878      	ldr	r0, [r7, #4]
 8000bf4:	f7ff fe1a 	bl	800082c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	2200      	movs	r2, #0
 8000c02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c0a:	f003 0310 	and.w	r3, r3, #16
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d118      	bne.n	8000c44 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c16:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000c1a:	f023 0302 	bic.w	r3, r3, #2
 8000c1e:	f043 0202 	orr.w	r2, r3, #2
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8000c26:	6878      	ldr	r0, [r7, #4]
 8000c28:	f000 fad8 	bl	80011dc <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	2200      	movs	r2, #0
 8000c30:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c36:	f023 0303 	bic.w	r3, r3, #3
 8000c3a:	f043 0201 	orr.w	r2, r3, #1
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	641a      	str	r2, [r3, #64]	; 0x40
 8000c42:	e001      	b.n	8000c48 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8000c44:	2301      	movs	r3, #1
 8000c46:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8000c50:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c52:	4618      	mov	r0, r3
 8000c54:	3710      	adds	r7, #16
 8000c56:	46bd      	mov	sp, r7
 8000c58:	bd80      	pop	{r7, pc}
	...

08000c5c <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	b085      	sub	sp, #20
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8000c64:	2300      	movs	r3, #0
 8000c66:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000c6e:	2b01      	cmp	r3, #1
 8000c70:	d101      	bne.n	8000c76 <HAL_ADC_Start+0x1a>
 8000c72:	2302      	movs	r3, #2
 8000c74:	e0b2      	b.n	8000ddc <HAL_ADC_Start+0x180>
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	2201      	movs	r2, #1
 8000c7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	689b      	ldr	r3, [r3, #8]
 8000c84:	f003 0301 	and.w	r3, r3, #1
 8000c88:	2b01      	cmp	r3, #1
 8000c8a:	d018      	beq.n	8000cbe <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	689a      	ldr	r2, [r3, #8]
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	f042 0201 	orr.w	r2, r2, #1
 8000c9a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000c9c:	4b52      	ldr	r3, [pc, #328]	; (8000de8 <HAL_ADC_Start+0x18c>)
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	4a52      	ldr	r2, [pc, #328]	; (8000dec <HAL_ADC_Start+0x190>)
 8000ca2:	fba2 2303 	umull	r2, r3, r2, r3
 8000ca6:	0c9a      	lsrs	r2, r3, #18
 8000ca8:	4613      	mov	r3, r2
 8000caa:	005b      	lsls	r3, r3, #1
 8000cac:	4413      	add	r3, r2
 8000cae:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8000cb0:	e002      	b.n	8000cb8 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8000cb2:	68bb      	ldr	r3, [r7, #8]
 8000cb4:	3b01      	subs	r3, #1
 8000cb6:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8000cb8:	68bb      	ldr	r3, [r7, #8]
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d1f9      	bne.n	8000cb2 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	689b      	ldr	r3, [r3, #8]
 8000cc4:	f003 0301 	and.w	r3, r3, #1
 8000cc8:	2b01      	cmp	r3, #1
 8000cca:	d17a      	bne.n	8000dc2 <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cd0:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000cd4:	f023 0301 	bic.w	r3, r3, #1
 8000cd8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	685b      	ldr	r3, [r3, #4]
 8000ce6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d007      	beq.n	8000cfe <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cf2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000cf6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d02:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000d06:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000d0a:	d106      	bne.n	8000d1a <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d10:	f023 0206 	bic.w	r2, r3, #6
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	645a      	str	r2, [r3, #68]	; 0x44
 8000d18:	e002      	b.n	8000d20 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	2200      	movs	r2, #0
 8000d24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000d28:	4b31      	ldr	r3, [pc, #196]	; (8000df0 <HAL_ADC_Start+0x194>)
 8000d2a:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8000d34:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8000d36:	68fb      	ldr	r3, [r7, #12]
 8000d38:	685b      	ldr	r3, [r3, #4]
 8000d3a:	f003 031f 	and.w	r3, r3, #31
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d12a      	bne.n	8000d98 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	4a2b      	ldr	r2, [pc, #172]	; (8000df4 <HAL_ADC_Start+0x198>)
 8000d48:	4293      	cmp	r3, r2
 8000d4a:	d015      	beq.n	8000d78 <HAL_ADC_Start+0x11c>
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	4a29      	ldr	r2, [pc, #164]	; (8000df8 <HAL_ADC_Start+0x19c>)
 8000d52:	4293      	cmp	r3, r2
 8000d54:	d105      	bne.n	8000d62 <HAL_ADC_Start+0x106>
 8000d56:	4b26      	ldr	r3, [pc, #152]	; (8000df0 <HAL_ADC_Start+0x194>)
 8000d58:	685b      	ldr	r3, [r3, #4]
 8000d5a:	f003 031f 	and.w	r3, r3, #31
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d00a      	beq.n	8000d78 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	4a25      	ldr	r2, [pc, #148]	; (8000dfc <HAL_ADC_Start+0x1a0>)
 8000d68:	4293      	cmp	r3, r2
 8000d6a:	d136      	bne.n	8000dda <HAL_ADC_Start+0x17e>
 8000d6c:	4b20      	ldr	r3, [pc, #128]	; (8000df0 <HAL_ADC_Start+0x194>)
 8000d6e:	685b      	ldr	r3, [r3, #4]
 8000d70:	f003 0310 	and.w	r3, r3, #16
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d130      	bne.n	8000dda <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	689b      	ldr	r3, [r3, #8]
 8000d7e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d129      	bne.n	8000dda <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	689a      	ldr	r2, [r3, #8]
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8000d94:	609a      	str	r2, [r3, #8]
 8000d96:	e020      	b.n	8000dda <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	4a15      	ldr	r2, [pc, #84]	; (8000df4 <HAL_ADC_Start+0x198>)
 8000d9e:	4293      	cmp	r3, r2
 8000da0:	d11b      	bne.n	8000dda <HAL_ADC_Start+0x17e>
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	689b      	ldr	r3, [r3, #8]
 8000da8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	d114      	bne.n	8000dda <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	689a      	ldr	r2, [r3, #8]
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8000dbe:	609a      	str	r2, [r3, #8]
 8000dc0:	e00b      	b.n	8000dda <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dc6:	f043 0210 	orr.w	r2, r3, #16
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dd2:	f043 0201 	orr.w	r2, r3, #1
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8000dda:	2300      	movs	r3, #0
}
 8000ddc:	4618      	mov	r0, r3
 8000dde:	3714      	adds	r7, #20
 8000de0:	46bd      	mov	sp, r7
 8000de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de6:	4770      	bx	lr
 8000de8:	20000000 	.word	0x20000000
 8000dec:	431bde83 	.word	0x431bde83
 8000df0:	40012300 	.word	0x40012300
 8000df4:	40012000 	.word	0x40012000
 8000df8:	40012100 	.word	0x40012100
 8000dfc:	40012200 	.word	0x40012200

08000e00 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8000e00:	b480      	push	{r7}
 8000e02:	b083      	sub	sp, #12
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000e0e:	2b01      	cmp	r3, #1
 8000e10:	d101      	bne.n	8000e16 <HAL_ADC_Stop+0x16>
 8000e12:	2302      	movs	r3, #2
 8000e14:	e021      	b.n	8000e5a <HAL_ADC_Stop+0x5a>
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	2201      	movs	r2, #1
 8000e1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	689a      	ldr	r2, [r3, #8]
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	f022 0201 	bic.w	r2, r2, #1
 8000e2c:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	689b      	ldr	r3, [r3, #8]
 8000e34:	f003 0301 	and.w	r3, r3, #1
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d109      	bne.n	8000e50 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e40:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000e44:	f023 0301 	bic.w	r3, r3, #1
 8000e48:	f043 0201 	orr.w	r2, r3, #1
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	2200      	movs	r2, #0
 8000e54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8000e58:	2300      	movs	r3, #0
}
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	370c      	adds	r7, #12
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e64:	4770      	bx	lr

08000e66 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8000e66:	b580      	push	{r7, lr}
 8000e68:	b084      	sub	sp, #16
 8000e6a:	af00      	add	r7, sp, #0
 8000e6c:	6078      	str	r0, [r7, #4]
 8000e6e:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8000e70:	2300      	movs	r3, #0
 8000e72:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	689b      	ldr	r3, [r3, #8]
 8000e7a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000e7e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000e82:	d113      	bne.n	8000eac <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	689b      	ldr	r3, [r3, #8]
 8000e8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8000e8e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000e92:	d10b      	bne.n	8000eac <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e98:	f043 0220 	orr.w	r2, r3, #32
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8000ea8:	2301      	movs	r3, #1
 8000eaa:	e063      	b.n	8000f74 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8000eac:	f7ff fe86 	bl	8000bbc <HAL_GetTick>
 8000eb0:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8000eb2:	e021      	b.n	8000ef8 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8000eb4:	683b      	ldr	r3, [r7, #0]
 8000eb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000eba:	d01d      	beq.n	8000ef8 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8000ebc:	683b      	ldr	r3, [r7, #0]
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d007      	beq.n	8000ed2 <HAL_ADC_PollForConversion+0x6c>
 8000ec2:	f7ff fe7b 	bl	8000bbc <HAL_GetTick>
 8000ec6:	4602      	mov	r2, r0
 8000ec8:	68fb      	ldr	r3, [r7, #12]
 8000eca:	1ad3      	subs	r3, r2, r3
 8000ecc:	683a      	ldr	r2, [r7, #0]
 8000ece:	429a      	cmp	r2, r3
 8000ed0:	d212      	bcs.n	8000ef8 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	f003 0302 	and.w	r3, r3, #2
 8000edc:	2b02      	cmp	r3, #2
 8000ede:	d00b      	beq.n	8000ef8 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ee4:	f043 0204 	orr.w	r2, r3, #4
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	2200      	movs	r2, #0
 8000ef0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8000ef4:	2303      	movs	r3, #3
 8000ef6:	e03d      	b.n	8000f74 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	f003 0302 	and.w	r3, r3, #2
 8000f02:	2b02      	cmp	r3, #2
 8000f04:	d1d6      	bne.n	8000eb4 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	f06f 0212 	mvn.w	r2, #18
 8000f0e:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f14:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	689b      	ldr	r3, [r3, #8]
 8000f22:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d123      	bne.n	8000f72 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d11f      	bne.n	8000f72 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f38:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d006      	beq.n	8000f4e <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	689b      	ldr	r3, [r3, #8]
 8000f46:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d111      	bne.n	8000f72 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f52:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f5e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d105      	bne.n	8000f72 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f6a:	f043 0201 	orr.w	r2, r3, #1
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8000f72:	2300      	movs	r3, #0
}
 8000f74:	4618      	mov	r0, r3
 8000f76:	3710      	adds	r7, #16
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	bd80      	pop	{r7, pc}

08000f7c <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8000f7c:	b480      	push	{r7}
 8000f7e:	b083      	sub	sp, #12
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	370c      	adds	r7, #12
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f94:	4770      	bx	lr
	...

08000f98 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8000f98:	b480      	push	{r7}
 8000f9a:	b085      	sub	sp, #20
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
 8000fa0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000fac:	2b01      	cmp	r3, #1
 8000fae:	d101      	bne.n	8000fb4 <HAL_ADC_ConfigChannel+0x1c>
 8000fb0:	2302      	movs	r3, #2
 8000fb2:	e105      	b.n	80011c0 <HAL_ADC_ConfigChannel+0x228>
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	2201      	movs	r2, #1
 8000fb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8000fbc:	683b      	ldr	r3, [r7, #0]
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	2b09      	cmp	r3, #9
 8000fc2:	d925      	bls.n	8001010 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	68d9      	ldr	r1, [r3, #12]
 8000fca:	683b      	ldr	r3, [r7, #0]
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	b29b      	uxth	r3, r3
 8000fd0:	461a      	mov	r2, r3
 8000fd2:	4613      	mov	r3, r2
 8000fd4:	005b      	lsls	r3, r3, #1
 8000fd6:	4413      	add	r3, r2
 8000fd8:	3b1e      	subs	r3, #30
 8000fda:	2207      	movs	r2, #7
 8000fdc:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe0:	43da      	mvns	r2, r3
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	400a      	ands	r2, r1
 8000fe8:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	68d9      	ldr	r1, [r3, #12]
 8000ff0:	683b      	ldr	r3, [r7, #0]
 8000ff2:	689a      	ldr	r2, [r3, #8]
 8000ff4:	683b      	ldr	r3, [r7, #0]
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	b29b      	uxth	r3, r3
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	4603      	mov	r3, r0
 8000ffe:	005b      	lsls	r3, r3, #1
 8001000:	4403      	add	r3, r0
 8001002:	3b1e      	subs	r3, #30
 8001004:	409a      	lsls	r2, r3
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	430a      	orrs	r2, r1
 800100c:	60da      	str	r2, [r3, #12]
 800100e:	e022      	b.n	8001056 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	6919      	ldr	r1, [r3, #16]
 8001016:	683b      	ldr	r3, [r7, #0]
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	b29b      	uxth	r3, r3
 800101c:	461a      	mov	r2, r3
 800101e:	4613      	mov	r3, r2
 8001020:	005b      	lsls	r3, r3, #1
 8001022:	4413      	add	r3, r2
 8001024:	2207      	movs	r2, #7
 8001026:	fa02 f303 	lsl.w	r3, r2, r3
 800102a:	43da      	mvns	r2, r3
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	400a      	ands	r2, r1
 8001032:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	6919      	ldr	r1, [r3, #16]
 800103a:	683b      	ldr	r3, [r7, #0]
 800103c:	689a      	ldr	r2, [r3, #8]
 800103e:	683b      	ldr	r3, [r7, #0]
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	b29b      	uxth	r3, r3
 8001044:	4618      	mov	r0, r3
 8001046:	4603      	mov	r3, r0
 8001048:	005b      	lsls	r3, r3, #1
 800104a:	4403      	add	r3, r0
 800104c:	409a      	lsls	r2, r3
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	430a      	orrs	r2, r1
 8001054:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001056:	683b      	ldr	r3, [r7, #0]
 8001058:	685b      	ldr	r3, [r3, #4]
 800105a:	2b06      	cmp	r3, #6
 800105c:	d824      	bhi.n	80010a8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001064:	683b      	ldr	r3, [r7, #0]
 8001066:	685a      	ldr	r2, [r3, #4]
 8001068:	4613      	mov	r3, r2
 800106a:	009b      	lsls	r3, r3, #2
 800106c:	4413      	add	r3, r2
 800106e:	3b05      	subs	r3, #5
 8001070:	221f      	movs	r2, #31
 8001072:	fa02 f303 	lsl.w	r3, r2, r3
 8001076:	43da      	mvns	r2, r3
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	400a      	ands	r2, r1
 800107e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001086:	683b      	ldr	r3, [r7, #0]
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	b29b      	uxth	r3, r3
 800108c:	4618      	mov	r0, r3
 800108e:	683b      	ldr	r3, [r7, #0]
 8001090:	685a      	ldr	r2, [r3, #4]
 8001092:	4613      	mov	r3, r2
 8001094:	009b      	lsls	r3, r3, #2
 8001096:	4413      	add	r3, r2
 8001098:	3b05      	subs	r3, #5
 800109a:	fa00 f203 	lsl.w	r2, r0, r3
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	430a      	orrs	r2, r1
 80010a4:	635a      	str	r2, [r3, #52]	; 0x34
 80010a6:	e04c      	b.n	8001142 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80010a8:	683b      	ldr	r3, [r7, #0]
 80010aa:	685b      	ldr	r3, [r3, #4]
 80010ac:	2b0c      	cmp	r3, #12
 80010ae:	d824      	bhi.n	80010fa <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80010b6:	683b      	ldr	r3, [r7, #0]
 80010b8:	685a      	ldr	r2, [r3, #4]
 80010ba:	4613      	mov	r3, r2
 80010bc:	009b      	lsls	r3, r3, #2
 80010be:	4413      	add	r3, r2
 80010c0:	3b23      	subs	r3, #35	; 0x23
 80010c2:	221f      	movs	r2, #31
 80010c4:	fa02 f303 	lsl.w	r3, r2, r3
 80010c8:	43da      	mvns	r2, r3
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	400a      	ands	r2, r1
 80010d0:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80010d8:	683b      	ldr	r3, [r7, #0]
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	b29b      	uxth	r3, r3
 80010de:	4618      	mov	r0, r3
 80010e0:	683b      	ldr	r3, [r7, #0]
 80010e2:	685a      	ldr	r2, [r3, #4]
 80010e4:	4613      	mov	r3, r2
 80010e6:	009b      	lsls	r3, r3, #2
 80010e8:	4413      	add	r3, r2
 80010ea:	3b23      	subs	r3, #35	; 0x23
 80010ec:	fa00 f203 	lsl.w	r2, r0, r3
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	430a      	orrs	r2, r1
 80010f6:	631a      	str	r2, [r3, #48]	; 0x30
 80010f8:	e023      	b.n	8001142 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001100:	683b      	ldr	r3, [r7, #0]
 8001102:	685a      	ldr	r2, [r3, #4]
 8001104:	4613      	mov	r3, r2
 8001106:	009b      	lsls	r3, r3, #2
 8001108:	4413      	add	r3, r2
 800110a:	3b41      	subs	r3, #65	; 0x41
 800110c:	221f      	movs	r2, #31
 800110e:	fa02 f303 	lsl.w	r3, r2, r3
 8001112:	43da      	mvns	r2, r3
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	400a      	ands	r2, r1
 800111a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001122:	683b      	ldr	r3, [r7, #0]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	b29b      	uxth	r3, r3
 8001128:	4618      	mov	r0, r3
 800112a:	683b      	ldr	r3, [r7, #0]
 800112c:	685a      	ldr	r2, [r3, #4]
 800112e:	4613      	mov	r3, r2
 8001130:	009b      	lsls	r3, r3, #2
 8001132:	4413      	add	r3, r2
 8001134:	3b41      	subs	r3, #65	; 0x41
 8001136:	fa00 f203 	lsl.w	r2, r0, r3
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	430a      	orrs	r2, r1
 8001140:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001142:	4b22      	ldr	r3, [pc, #136]	; (80011cc <HAL_ADC_ConfigChannel+0x234>)
 8001144:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	4a21      	ldr	r2, [pc, #132]	; (80011d0 <HAL_ADC_ConfigChannel+0x238>)
 800114c:	4293      	cmp	r3, r2
 800114e:	d109      	bne.n	8001164 <HAL_ADC_ConfigChannel+0x1cc>
 8001150:	683b      	ldr	r3, [r7, #0]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	2b12      	cmp	r3, #18
 8001156:	d105      	bne.n	8001164 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001158:	68fb      	ldr	r3, [r7, #12]
 800115a:	685b      	ldr	r3, [r3, #4]
 800115c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001160:	68fb      	ldr	r3, [r7, #12]
 8001162:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	4a19      	ldr	r2, [pc, #100]	; (80011d0 <HAL_ADC_ConfigChannel+0x238>)
 800116a:	4293      	cmp	r3, r2
 800116c:	d123      	bne.n	80011b6 <HAL_ADC_ConfigChannel+0x21e>
 800116e:	683b      	ldr	r3, [r7, #0]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	2b10      	cmp	r3, #16
 8001174:	d003      	beq.n	800117e <HAL_ADC_ConfigChannel+0x1e6>
 8001176:	683b      	ldr	r3, [r7, #0]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	2b11      	cmp	r3, #17
 800117c:	d11b      	bne.n	80011b6 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800117e:	68fb      	ldr	r3, [r7, #12]
 8001180:	685b      	ldr	r3, [r3, #4]
 8001182:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001186:	68fb      	ldr	r3, [r7, #12]
 8001188:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800118a:	683b      	ldr	r3, [r7, #0]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	2b10      	cmp	r3, #16
 8001190:	d111      	bne.n	80011b6 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001192:	4b10      	ldr	r3, [pc, #64]	; (80011d4 <HAL_ADC_ConfigChannel+0x23c>)
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	4a10      	ldr	r2, [pc, #64]	; (80011d8 <HAL_ADC_ConfigChannel+0x240>)
 8001198:	fba2 2303 	umull	r2, r3, r2, r3
 800119c:	0c9a      	lsrs	r2, r3, #18
 800119e:	4613      	mov	r3, r2
 80011a0:	009b      	lsls	r3, r3, #2
 80011a2:	4413      	add	r3, r2
 80011a4:	005b      	lsls	r3, r3, #1
 80011a6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80011a8:	e002      	b.n	80011b0 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80011aa:	68bb      	ldr	r3, [r7, #8]
 80011ac:	3b01      	subs	r3, #1
 80011ae:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80011b0:	68bb      	ldr	r3, [r7, #8]
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d1f9      	bne.n	80011aa <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	2200      	movs	r2, #0
 80011ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80011be:	2300      	movs	r3, #0
}
 80011c0:	4618      	mov	r0, r3
 80011c2:	3714      	adds	r7, #20
 80011c4:	46bd      	mov	sp, r7
 80011c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ca:	4770      	bx	lr
 80011cc:	40012300 	.word	0x40012300
 80011d0:	40012000 	.word	0x40012000
 80011d4:	20000000 	.word	0x20000000
 80011d8:	431bde83 	.word	0x431bde83

080011dc <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80011dc:	b480      	push	{r7}
 80011de:	b085      	sub	sp, #20
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80011e4:	4b79      	ldr	r3, [pc, #484]	; (80013cc <ADC_Init+0x1f0>)
 80011e6:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80011e8:	68fb      	ldr	r3, [r7, #12]
 80011ea:	685b      	ldr	r3, [r3, #4]
 80011ec:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80011f0:	68fb      	ldr	r3, [r7, #12]
 80011f2:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80011f4:	68fb      	ldr	r3, [r7, #12]
 80011f6:	685a      	ldr	r2, [r3, #4]
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	685b      	ldr	r3, [r3, #4]
 80011fc:	431a      	orrs	r2, r3
 80011fe:	68fb      	ldr	r3, [r7, #12]
 8001200:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	685a      	ldr	r2, [r3, #4]
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001210:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	6859      	ldr	r1, [r3, #4]
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	691b      	ldr	r3, [r3, #16]
 800121c:	021a      	lsls	r2, r3, #8
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	430a      	orrs	r2, r1
 8001224:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	685a      	ldr	r2, [r3, #4]
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001234:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	6859      	ldr	r1, [r3, #4]
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	689a      	ldr	r2, [r3, #8]
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	430a      	orrs	r2, r1
 8001246:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	689a      	ldr	r2, [r3, #8]
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001256:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	6899      	ldr	r1, [r3, #8]
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	68da      	ldr	r2, [r3, #12]
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	430a      	orrs	r2, r1
 8001268:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800126e:	4a58      	ldr	r2, [pc, #352]	; (80013d0 <ADC_Init+0x1f4>)
 8001270:	4293      	cmp	r3, r2
 8001272:	d022      	beq.n	80012ba <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	689a      	ldr	r2, [r3, #8]
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001282:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	6899      	ldr	r1, [r3, #8]
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	430a      	orrs	r2, r1
 8001294:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	689a      	ldr	r2, [r3, #8]
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80012a4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	6899      	ldr	r1, [r3, #8]
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	430a      	orrs	r2, r1
 80012b6:	609a      	str	r2, [r3, #8]
 80012b8:	e00f      	b.n	80012da <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	689a      	ldr	r2, [r3, #8]
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80012c8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	689a      	ldr	r2, [r3, #8]
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80012d8:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	689a      	ldr	r2, [r3, #8]
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	f022 0202 	bic.w	r2, r2, #2
 80012e8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	6899      	ldr	r1, [r3, #8]
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	7e1b      	ldrb	r3, [r3, #24]
 80012f4:	005a      	lsls	r2, r3, #1
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	430a      	orrs	r2, r1
 80012fc:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001304:	2b00      	cmp	r3, #0
 8001306:	d01b      	beq.n	8001340 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	685a      	ldr	r2, [r3, #4]
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001316:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	685a      	ldr	r2, [r3, #4]
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001326:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	6859      	ldr	r1, [r3, #4]
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001332:	3b01      	subs	r3, #1
 8001334:	035a      	lsls	r2, r3, #13
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	430a      	orrs	r2, r1
 800133c:	605a      	str	r2, [r3, #4]
 800133e:	e007      	b.n	8001350 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	685a      	ldr	r2, [r3, #4]
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800134e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800135e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	69db      	ldr	r3, [r3, #28]
 800136a:	3b01      	subs	r3, #1
 800136c:	051a      	lsls	r2, r3, #20
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	430a      	orrs	r2, r1
 8001374:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	689a      	ldr	r2, [r3, #8]
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001384:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	6899      	ldr	r1, [r3, #8]
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001392:	025a      	lsls	r2, r3, #9
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	430a      	orrs	r2, r1
 800139a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	689a      	ldr	r2, [r3, #8]
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80013aa:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	6899      	ldr	r1, [r3, #8]
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	695b      	ldr	r3, [r3, #20]
 80013b6:	029a      	lsls	r2, r3, #10
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	430a      	orrs	r2, r1
 80013be:	609a      	str	r2, [r3, #8]
}
 80013c0:	bf00      	nop
 80013c2:	3714      	adds	r7, #20
 80013c4:	46bd      	mov	sp, r7
 80013c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ca:	4770      	bx	lr
 80013cc:	40012300 	.word	0x40012300
 80013d0:	0f000001 	.word	0x0f000001

080013d4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013d4:	b480      	push	{r7}
 80013d6:	b085      	sub	sp, #20
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	f003 0307 	and.w	r3, r3, #7
 80013e2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80013e4:	4b0c      	ldr	r3, [pc, #48]	; (8001418 <__NVIC_SetPriorityGrouping+0x44>)
 80013e6:	68db      	ldr	r3, [r3, #12]
 80013e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80013ea:	68ba      	ldr	r2, [r7, #8]
 80013ec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80013f0:	4013      	ands	r3, r2
 80013f2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80013f8:	68bb      	ldr	r3, [r7, #8]
 80013fa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80013fc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001400:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001404:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001406:	4a04      	ldr	r2, [pc, #16]	; (8001418 <__NVIC_SetPriorityGrouping+0x44>)
 8001408:	68bb      	ldr	r3, [r7, #8]
 800140a:	60d3      	str	r3, [r2, #12]
}
 800140c:	bf00      	nop
 800140e:	3714      	adds	r7, #20
 8001410:	46bd      	mov	sp, r7
 8001412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001416:	4770      	bx	lr
 8001418:	e000ed00 	.word	0xe000ed00

0800141c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800141c:	b480      	push	{r7}
 800141e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001420:	4b04      	ldr	r3, [pc, #16]	; (8001434 <__NVIC_GetPriorityGrouping+0x18>)
 8001422:	68db      	ldr	r3, [r3, #12]
 8001424:	0a1b      	lsrs	r3, r3, #8
 8001426:	f003 0307 	and.w	r3, r3, #7
}
 800142a:	4618      	mov	r0, r3
 800142c:	46bd      	mov	sp, r7
 800142e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001432:	4770      	bx	lr
 8001434:	e000ed00 	.word	0xe000ed00

08001438 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001438:	b480      	push	{r7}
 800143a:	b083      	sub	sp, #12
 800143c:	af00      	add	r7, sp, #0
 800143e:	4603      	mov	r3, r0
 8001440:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001442:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001446:	2b00      	cmp	r3, #0
 8001448:	db0b      	blt.n	8001462 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800144a:	79fb      	ldrb	r3, [r7, #7]
 800144c:	f003 021f 	and.w	r2, r3, #31
 8001450:	4907      	ldr	r1, [pc, #28]	; (8001470 <__NVIC_EnableIRQ+0x38>)
 8001452:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001456:	095b      	lsrs	r3, r3, #5
 8001458:	2001      	movs	r0, #1
 800145a:	fa00 f202 	lsl.w	r2, r0, r2
 800145e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001462:	bf00      	nop
 8001464:	370c      	adds	r7, #12
 8001466:	46bd      	mov	sp, r7
 8001468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146c:	4770      	bx	lr
 800146e:	bf00      	nop
 8001470:	e000e100 	.word	0xe000e100

08001474 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001474:	b480      	push	{r7}
 8001476:	b083      	sub	sp, #12
 8001478:	af00      	add	r7, sp, #0
 800147a:	4603      	mov	r3, r0
 800147c:	6039      	str	r1, [r7, #0]
 800147e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001480:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001484:	2b00      	cmp	r3, #0
 8001486:	db0a      	blt.n	800149e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001488:	683b      	ldr	r3, [r7, #0]
 800148a:	b2da      	uxtb	r2, r3
 800148c:	490c      	ldr	r1, [pc, #48]	; (80014c0 <__NVIC_SetPriority+0x4c>)
 800148e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001492:	0112      	lsls	r2, r2, #4
 8001494:	b2d2      	uxtb	r2, r2
 8001496:	440b      	add	r3, r1
 8001498:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800149c:	e00a      	b.n	80014b4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800149e:	683b      	ldr	r3, [r7, #0]
 80014a0:	b2da      	uxtb	r2, r3
 80014a2:	4908      	ldr	r1, [pc, #32]	; (80014c4 <__NVIC_SetPriority+0x50>)
 80014a4:	79fb      	ldrb	r3, [r7, #7]
 80014a6:	f003 030f 	and.w	r3, r3, #15
 80014aa:	3b04      	subs	r3, #4
 80014ac:	0112      	lsls	r2, r2, #4
 80014ae:	b2d2      	uxtb	r2, r2
 80014b0:	440b      	add	r3, r1
 80014b2:	761a      	strb	r2, [r3, #24]
}
 80014b4:	bf00      	nop
 80014b6:	370c      	adds	r7, #12
 80014b8:	46bd      	mov	sp, r7
 80014ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014be:	4770      	bx	lr
 80014c0:	e000e100 	.word	0xe000e100
 80014c4:	e000ed00 	.word	0xe000ed00

080014c8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014c8:	b480      	push	{r7}
 80014ca:	b089      	sub	sp, #36	; 0x24
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	60f8      	str	r0, [r7, #12]
 80014d0:	60b9      	str	r1, [r7, #8]
 80014d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	f003 0307 	and.w	r3, r3, #7
 80014da:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80014dc:	69fb      	ldr	r3, [r7, #28]
 80014de:	f1c3 0307 	rsb	r3, r3, #7
 80014e2:	2b04      	cmp	r3, #4
 80014e4:	bf28      	it	cs
 80014e6:	2304      	movcs	r3, #4
 80014e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014ea:	69fb      	ldr	r3, [r7, #28]
 80014ec:	3304      	adds	r3, #4
 80014ee:	2b06      	cmp	r3, #6
 80014f0:	d902      	bls.n	80014f8 <NVIC_EncodePriority+0x30>
 80014f2:	69fb      	ldr	r3, [r7, #28]
 80014f4:	3b03      	subs	r3, #3
 80014f6:	e000      	b.n	80014fa <NVIC_EncodePriority+0x32>
 80014f8:	2300      	movs	r3, #0
 80014fa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014fc:	f04f 32ff 	mov.w	r2, #4294967295
 8001500:	69bb      	ldr	r3, [r7, #24]
 8001502:	fa02 f303 	lsl.w	r3, r2, r3
 8001506:	43da      	mvns	r2, r3
 8001508:	68bb      	ldr	r3, [r7, #8]
 800150a:	401a      	ands	r2, r3
 800150c:	697b      	ldr	r3, [r7, #20]
 800150e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001510:	f04f 31ff 	mov.w	r1, #4294967295
 8001514:	697b      	ldr	r3, [r7, #20]
 8001516:	fa01 f303 	lsl.w	r3, r1, r3
 800151a:	43d9      	mvns	r1, r3
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001520:	4313      	orrs	r3, r2
         );
}
 8001522:	4618      	mov	r0, r3
 8001524:	3724      	adds	r7, #36	; 0x24
 8001526:	46bd      	mov	sp, r7
 8001528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152c:	4770      	bx	lr
	...

08001530 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	b082      	sub	sp, #8
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	3b01      	subs	r3, #1
 800153c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001540:	d301      	bcc.n	8001546 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001542:	2301      	movs	r3, #1
 8001544:	e00f      	b.n	8001566 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001546:	4a0a      	ldr	r2, [pc, #40]	; (8001570 <SysTick_Config+0x40>)
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	3b01      	subs	r3, #1
 800154c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800154e:	210f      	movs	r1, #15
 8001550:	f04f 30ff 	mov.w	r0, #4294967295
 8001554:	f7ff ff8e 	bl	8001474 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001558:	4b05      	ldr	r3, [pc, #20]	; (8001570 <SysTick_Config+0x40>)
 800155a:	2200      	movs	r2, #0
 800155c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800155e:	4b04      	ldr	r3, [pc, #16]	; (8001570 <SysTick_Config+0x40>)
 8001560:	2207      	movs	r2, #7
 8001562:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001564:	2300      	movs	r3, #0
}
 8001566:	4618      	mov	r0, r3
 8001568:	3708      	adds	r7, #8
 800156a:	46bd      	mov	sp, r7
 800156c:	bd80      	pop	{r7, pc}
 800156e:	bf00      	nop
 8001570:	e000e010 	.word	0xe000e010

08001574 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	b082      	sub	sp, #8
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800157c:	6878      	ldr	r0, [r7, #4]
 800157e:	f7ff ff29 	bl	80013d4 <__NVIC_SetPriorityGrouping>
}
 8001582:	bf00      	nop
 8001584:	3708      	adds	r7, #8
 8001586:	46bd      	mov	sp, r7
 8001588:	bd80      	pop	{r7, pc}

0800158a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800158a:	b580      	push	{r7, lr}
 800158c:	b086      	sub	sp, #24
 800158e:	af00      	add	r7, sp, #0
 8001590:	4603      	mov	r3, r0
 8001592:	60b9      	str	r1, [r7, #8]
 8001594:	607a      	str	r2, [r7, #4]
 8001596:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001598:	2300      	movs	r3, #0
 800159a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800159c:	f7ff ff3e 	bl	800141c <__NVIC_GetPriorityGrouping>
 80015a0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80015a2:	687a      	ldr	r2, [r7, #4]
 80015a4:	68b9      	ldr	r1, [r7, #8]
 80015a6:	6978      	ldr	r0, [r7, #20]
 80015a8:	f7ff ff8e 	bl	80014c8 <NVIC_EncodePriority>
 80015ac:	4602      	mov	r2, r0
 80015ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015b2:	4611      	mov	r1, r2
 80015b4:	4618      	mov	r0, r3
 80015b6:	f7ff ff5d 	bl	8001474 <__NVIC_SetPriority>
}
 80015ba:	bf00      	nop
 80015bc:	3718      	adds	r7, #24
 80015be:	46bd      	mov	sp, r7
 80015c0:	bd80      	pop	{r7, pc}

080015c2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015c2:	b580      	push	{r7, lr}
 80015c4:	b082      	sub	sp, #8
 80015c6:	af00      	add	r7, sp, #0
 80015c8:	4603      	mov	r3, r0
 80015ca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80015cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015d0:	4618      	mov	r0, r3
 80015d2:	f7ff ff31 	bl	8001438 <__NVIC_EnableIRQ>
}
 80015d6:	bf00      	nop
 80015d8:	3708      	adds	r7, #8
 80015da:	46bd      	mov	sp, r7
 80015dc:	bd80      	pop	{r7, pc}

080015de <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80015de:	b580      	push	{r7, lr}
 80015e0:	b082      	sub	sp, #8
 80015e2:	af00      	add	r7, sp, #0
 80015e4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80015e6:	6878      	ldr	r0, [r7, #4]
 80015e8:	f7ff ffa2 	bl	8001530 <SysTick_Config>
 80015ec:	4603      	mov	r3, r0
}
 80015ee:	4618      	mov	r0, r3
 80015f0:	3708      	adds	r7, #8
 80015f2:	46bd      	mov	sp, r7
 80015f4:	bd80      	pop	{r7, pc}
	...

080015f8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b086      	sub	sp, #24
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001600:	2300      	movs	r3, #0
 8001602:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001604:	f7ff fada 	bl	8000bbc <HAL_GetTick>
 8001608:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	2b00      	cmp	r3, #0
 800160e:	d101      	bne.n	8001614 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001610:	2301      	movs	r3, #1
 8001612:	e099      	b.n	8001748 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	2202      	movs	r2, #2
 8001618:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	2200      	movs	r2, #0
 8001620:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	681a      	ldr	r2, [r3, #0]
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	f022 0201 	bic.w	r2, r2, #1
 8001632:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001634:	e00f      	b.n	8001656 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001636:	f7ff fac1 	bl	8000bbc <HAL_GetTick>
 800163a:	4602      	mov	r2, r0
 800163c:	693b      	ldr	r3, [r7, #16]
 800163e:	1ad3      	subs	r3, r2, r3
 8001640:	2b05      	cmp	r3, #5
 8001642:	d908      	bls.n	8001656 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	2220      	movs	r2, #32
 8001648:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	2203      	movs	r2, #3
 800164e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001652:	2303      	movs	r3, #3
 8001654:	e078      	b.n	8001748 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	f003 0301 	and.w	r3, r3, #1
 8001660:	2b00      	cmp	r3, #0
 8001662:	d1e8      	bne.n	8001636 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800166c:	697a      	ldr	r2, [r7, #20]
 800166e:	4b38      	ldr	r3, [pc, #224]	; (8001750 <HAL_DMA_Init+0x158>)
 8001670:	4013      	ands	r3, r2
 8001672:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	685a      	ldr	r2, [r3, #4]
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	689b      	ldr	r3, [r3, #8]
 800167c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001682:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	691b      	ldr	r3, [r3, #16]
 8001688:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800168e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	699b      	ldr	r3, [r3, #24]
 8001694:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800169a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	6a1b      	ldr	r3, [r3, #32]
 80016a0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80016a2:	697a      	ldr	r2, [r7, #20]
 80016a4:	4313      	orrs	r3, r2
 80016a6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016ac:	2b04      	cmp	r3, #4
 80016ae:	d107      	bne.n	80016c0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016b8:	4313      	orrs	r3, r2
 80016ba:	697a      	ldr	r2, [r7, #20]
 80016bc:	4313      	orrs	r3, r2
 80016be:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	697a      	ldr	r2, [r7, #20]
 80016c6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	695b      	ldr	r3, [r3, #20]
 80016ce:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80016d0:	697b      	ldr	r3, [r7, #20]
 80016d2:	f023 0307 	bic.w	r3, r3, #7
 80016d6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016dc:	697a      	ldr	r2, [r7, #20]
 80016de:	4313      	orrs	r3, r2
 80016e0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016e6:	2b04      	cmp	r3, #4
 80016e8:	d117      	bne.n	800171a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016ee:	697a      	ldr	r2, [r7, #20]
 80016f0:	4313      	orrs	r3, r2
 80016f2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d00e      	beq.n	800171a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80016fc:	6878      	ldr	r0, [r7, #4]
 80016fe:	f000 fa7b 	bl	8001bf8 <DMA_CheckFifoParam>
 8001702:	4603      	mov	r3, r0
 8001704:	2b00      	cmp	r3, #0
 8001706:	d008      	beq.n	800171a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	2240      	movs	r2, #64	; 0x40
 800170c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	2201      	movs	r2, #1
 8001712:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001716:	2301      	movs	r3, #1
 8001718:	e016      	b.n	8001748 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	697a      	ldr	r2, [r7, #20]
 8001720:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001722:	6878      	ldr	r0, [r7, #4]
 8001724:	f000 fa32 	bl	8001b8c <DMA_CalcBaseAndBitshift>
 8001728:	4603      	mov	r3, r0
 800172a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001730:	223f      	movs	r2, #63	; 0x3f
 8001732:	409a      	lsls	r2, r3
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	2200      	movs	r2, #0
 800173c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	2201      	movs	r2, #1
 8001742:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001746:	2300      	movs	r3, #0
}
 8001748:	4618      	mov	r0, r3
 800174a:	3718      	adds	r7, #24
 800174c:	46bd      	mov	sp, r7
 800174e:	bd80      	pop	{r7, pc}
 8001750:	f010803f 	.word	0xf010803f

08001754 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	b084      	sub	sp, #16
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001760:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001762:	f7ff fa2b 	bl	8000bbc <HAL_GetTick>
 8001766:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800176e:	b2db      	uxtb	r3, r3
 8001770:	2b02      	cmp	r3, #2
 8001772:	d008      	beq.n	8001786 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	2280      	movs	r2, #128	; 0x80
 8001778:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	2200      	movs	r2, #0
 800177e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001782:	2301      	movs	r3, #1
 8001784:	e052      	b.n	800182c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	681a      	ldr	r2, [r3, #0]
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	f022 0216 	bic.w	r2, r2, #22
 8001794:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	695a      	ldr	r2, [r3, #20]
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80017a4:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d103      	bne.n	80017b6 <HAL_DMA_Abort+0x62>
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d007      	beq.n	80017c6 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	681a      	ldr	r2, [r3, #0]
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	f022 0208 	bic.w	r2, r2, #8
 80017c4:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	681a      	ldr	r2, [r3, #0]
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	f022 0201 	bic.w	r2, r2, #1
 80017d4:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80017d6:	e013      	b.n	8001800 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80017d8:	f7ff f9f0 	bl	8000bbc <HAL_GetTick>
 80017dc:	4602      	mov	r2, r0
 80017de:	68bb      	ldr	r3, [r7, #8]
 80017e0:	1ad3      	subs	r3, r2, r3
 80017e2:	2b05      	cmp	r3, #5
 80017e4:	d90c      	bls.n	8001800 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	2220      	movs	r2, #32
 80017ea:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	2203      	movs	r2, #3
 80017f0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	2200      	movs	r2, #0
 80017f8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80017fc:	2303      	movs	r3, #3
 80017fe:	e015      	b.n	800182c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	f003 0301 	and.w	r3, r3, #1
 800180a:	2b00      	cmp	r3, #0
 800180c:	d1e4      	bne.n	80017d8 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001812:	223f      	movs	r2, #63	; 0x3f
 8001814:	409a      	lsls	r2, r3
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	2201      	movs	r2, #1
 800181e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	2200      	movs	r2, #0
 8001826:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800182a:	2300      	movs	r3, #0
}
 800182c:	4618      	mov	r0, r3
 800182e:	3710      	adds	r7, #16
 8001830:	46bd      	mov	sp, r7
 8001832:	bd80      	pop	{r7, pc}

08001834 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001834:	b480      	push	{r7}
 8001836:	b083      	sub	sp, #12
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001842:	b2db      	uxtb	r3, r3
 8001844:	2b02      	cmp	r3, #2
 8001846:	d004      	beq.n	8001852 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	2280      	movs	r2, #128	; 0x80
 800184c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800184e:	2301      	movs	r3, #1
 8001850:	e00c      	b.n	800186c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	2205      	movs	r2, #5
 8001856:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	681a      	ldr	r2, [r3, #0]
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	f022 0201 	bic.w	r2, r2, #1
 8001868:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800186a:	2300      	movs	r3, #0
}
 800186c:	4618      	mov	r0, r3
 800186e:	370c      	adds	r7, #12
 8001870:	46bd      	mov	sp, r7
 8001872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001876:	4770      	bx	lr

08001878 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	b086      	sub	sp, #24
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001880:	2300      	movs	r3, #0
 8001882:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001884:	4b8e      	ldr	r3, [pc, #568]	; (8001ac0 <HAL_DMA_IRQHandler+0x248>)
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	4a8e      	ldr	r2, [pc, #568]	; (8001ac4 <HAL_DMA_IRQHandler+0x24c>)
 800188a:	fba2 2303 	umull	r2, r3, r2, r3
 800188e:	0a9b      	lsrs	r3, r3, #10
 8001890:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001896:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001898:	693b      	ldr	r3, [r7, #16]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018a2:	2208      	movs	r2, #8
 80018a4:	409a      	lsls	r2, r3
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	4013      	ands	r3, r2
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d01a      	beq.n	80018e4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	f003 0304 	and.w	r3, r3, #4
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d013      	beq.n	80018e4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	681a      	ldr	r2, [r3, #0]
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	f022 0204 	bic.w	r2, r2, #4
 80018ca:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018d0:	2208      	movs	r2, #8
 80018d2:	409a      	lsls	r2, r3
 80018d4:	693b      	ldr	r3, [r7, #16]
 80018d6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80018dc:	f043 0201 	orr.w	r2, r3, #1
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018e8:	2201      	movs	r2, #1
 80018ea:	409a      	lsls	r2, r3
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	4013      	ands	r3, r2
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d012      	beq.n	800191a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	695b      	ldr	r3, [r3, #20]
 80018fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d00b      	beq.n	800191a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001906:	2201      	movs	r2, #1
 8001908:	409a      	lsls	r2, r3
 800190a:	693b      	ldr	r3, [r7, #16]
 800190c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001912:	f043 0202 	orr.w	r2, r3, #2
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800191e:	2204      	movs	r2, #4
 8001920:	409a      	lsls	r2, r3
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	4013      	ands	r3, r2
 8001926:	2b00      	cmp	r3, #0
 8001928:	d012      	beq.n	8001950 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	f003 0302 	and.w	r3, r3, #2
 8001934:	2b00      	cmp	r3, #0
 8001936:	d00b      	beq.n	8001950 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800193c:	2204      	movs	r2, #4
 800193e:	409a      	lsls	r2, r3
 8001940:	693b      	ldr	r3, [r7, #16]
 8001942:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001948:	f043 0204 	orr.w	r2, r3, #4
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001954:	2210      	movs	r2, #16
 8001956:	409a      	lsls	r2, r3
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	4013      	ands	r3, r2
 800195c:	2b00      	cmp	r3, #0
 800195e:	d043      	beq.n	80019e8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	f003 0308 	and.w	r3, r3, #8
 800196a:	2b00      	cmp	r3, #0
 800196c:	d03c      	beq.n	80019e8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001972:	2210      	movs	r2, #16
 8001974:	409a      	lsls	r2, r3
 8001976:	693b      	ldr	r3, [r7, #16]
 8001978:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001984:	2b00      	cmp	r3, #0
 8001986:	d018      	beq.n	80019ba <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001992:	2b00      	cmp	r3, #0
 8001994:	d108      	bne.n	80019a8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800199a:	2b00      	cmp	r3, #0
 800199c:	d024      	beq.n	80019e8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019a2:	6878      	ldr	r0, [r7, #4]
 80019a4:	4798      	blx	r3
 80019a6:	e01f      	b.n	80019e8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d01b      	beq.n	80019e8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80019b4:	6878      	ldr	r0, [r7, #4]
 80019b6:	4798      	blx	r3
 80019b8:	e016      	b.n	80019e8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d107      	bne.n	80019d8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	681a      	ldr	r2, [r3, #0]
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	f022 0208 	bic.w	r2, r2, #8
 80019d6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d003      	beq.n	80019e8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019e4:	6878      	ldr	r0, [r7, #4]
 80019e6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019ec:	2220      	movs	r2, #32
 80019ee:	409a      	lsls	r2, r3
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	4013      	ands	r3, r2
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	f000 808f 	beq.w	8001b18 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	f003 0310 	and.w	r3, r3, #16
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	f000 8087 	beq.w	8001b18 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a0e:	2220      	movs	r2, #32
 8001a10:	409a      	lsls	r2, r3
 8001a12:	693b      	ldr	r3, [r7, #16]
 8001a14:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001a1c:	b2db      	uxtb	r3, r3
 8001a1e:	2b05      	cmp	r3, #5
 8001a20:	d136      	bne.n	8001a90 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	681a      	ldr	r2, [r3, #0]
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	f022 0216 	bic.w	r2, r2, #22
 8001a30:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	695a      	ldr	r2, [r3, #20]
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001a40:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d103      	bne.n	8001a52 <HAL_DMA_IRQHandler+0x1da>
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d007      	beq.n	8001a62 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	681a      	ldr	r2, [r3, #0]
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	f022 0208 	bic.w	r2, r2, #8
 8001a60:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a66:	223f      	movs	r2, #63	; 0x3f
 8001a68:	409a      	lsls	r2, r3
 8001a6a:	693b      	ldr	r3, [r7, #16]
 8001a6c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	2201      	movs	r2, #1
 8001a72:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	2200      	movs	r2, #0
 8001a7a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d07e      	beq.n	8001b84 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001a8a:	6878      	ldr	r0, [r7, #4]
 8001a8c:	4798      	blx	r3
        }
        return;
 8001a8e:	e079      	b.n	8001b84 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d01d      	beq.n	8001ada <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d10d      	bne.n	8001ac8 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d031      	beq.n	8001b18 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ab8:	6878      	ldr	r0, [r7, #4]
 8001aba:	4798      	blx	r3
 8001abc:	e02c      	b.n	8001b18 <HAL_DMA_IRQHandler+0x2a0>
 8001abe:	bf00      	nop
 8001ac0:	20000000 	.word	0x20000000
 8001ac4:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d023      	beq.n	8001b18 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ad4:	6878      	ldr	r0, [r7, #4]
 8001ad6:	4798      	blx	r3
 8001ad8:	e01e      	b.n	8001b18 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d10f      	bne.n	8001b08 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	681a      	ldr	r2, [r3, #0]
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	f022 0210 	bic.w	r2, r2, #16
 8001af6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	2201      	movs	r2, #1
 8001afc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	2200      	movs	r2, #0
 8001b04:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d003      	beq.n	8001b18 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b14:	6878      	ldr	r0, [r7, #4]
 8001b16:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d032      	beq.n	8001b86 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b24:	f003 0301 	and.w	r3, r3, #1
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d022      	beq.n	8001b72 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	2205      	movs	r2, #5
 8001b30:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	681a      	ldr	r2, [r3, #0]
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	f022 0201 	bic.w	r2, r2, #1
 8001b42:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001b44:	68bb      	ldr	r3, [r7, #8]
 8001b46:	3301      	adds	r3, #1
 8001b48:	60bb      	str	r3, [r7, #8]
 8001b4a:	697a      	ldr	r2, [r7, #20]
 8001b4c:	429a      	cmp	r2, r3
 8001b4e:	d307      	bcc.n	8001b60 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	f003 0301 	and.w	r3, r3, #1
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d1f2      	bne.n	8001b44 <HAL_DMA_IRQHandler+0x2cc>
 8001b5e:	e000      	b.n	8001b62 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001b60:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	2201      	movs	r2, #1
 8001b66:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d005      	beq.n	8001b86 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b7e:	6878      	ldr	r0, [r7, #4]
 8001b80:	4798      	blx	r3
 8001b82:	e000      	b.n	8001b86 <HAL_DMA_IRQHandler+0x30e>
        return;
 8001b84:	bf00      	nop
    }
  }
}
 8001b86:	3718      	adds	r7, #24
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	bd80      	pop	{r7, pc}

08001b8c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001b8c:	b480      	push	{r7}
 8001b8e:	b085      	sub	sp, #20
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	b2db      	uxtb	r3, r3
 8001b9a:	3b10      	subs	r3, #16
 8001b9c:	4a14      	ldr	r2, [pc, #80]	; (8001bf0 <DMA_CalcBaseAndBitshift+0x64>)
 8001b9e:	fba2 2303 	umull	r2, r3, r2, r3
 8001ba2:	091b      	lsrs	r3, r3, #4
 8001ba4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001ba6:	4a13      	ldr	r2, [pc, #76]	; (8001bf4 <DMA_CalcBaseAndBitshift+0x68>)
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	4413      	add	r3, r2
 8001bac:	781b      	ldrb	r3, [r3, #0]
 8001bae:	461a      	mov	r2, r3
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	2b03      	cmp	r3, #3
 8001bb8:	d909      	bls.n	8001bce <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001bc2:	f023 0303 	bic.w	r3, r3, #3
 8001bc6:	1d1a      	adds	r2, r3, #4
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	659a      	str	r2, [r3, #88]	; 0x58
 8001bcc:	e007      	b.n	8001bde <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001bd6:	f023 0303 	bic.w	r3, r3, #3
 8001bda:	687a      	ldr	r2, [r7, #4]
 8001bdc:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001be2:	4618      	mov	r0, r3
 8001be4:	3714      	adds	r7, #20
 8001be6:	46bd      	mov	sp, r7
 8001be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bec:	4770      	bx	lr
 8001bee:	bf00      	nop
 8001bf0:	aaaaaaab 	.word	0xaaaaaaab
 8001bf4:	08003a08 	.word	0x08003a08

08001bf8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001bf8:	b480      	push	{r7}
 8001bfa:	b085      	sub	sp, #20
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001c00:	2300      	movs	r3, #0
 8001c02:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c08:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	699b      	ldr	r3, [r3, #24]
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d11f      	bne.n	8001c52 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001c12:	68bb      	ldr	r3, [r7, #8]
 8001c14:	2b03      	cmp	r3, #3
 8001c16:	d856      	bhi.n	8001cc6 <DMA_CheckFifoParam+0xce>
 8001c18:	a201      	add	r2, pc, #4	; (adr r2, 8001c20 <DMA_CheckFifoParam+0x28>)
 8001c1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c1e:	bf00      	nop
 8001c20:	08001c31 	.word	0x08001c31
 8001c24:	08001c43 	.word	0x08001c43
 8001c28:	08001c31 	.word	0x08001c31
 8001c2c:	08001cc7 	.word	0x08001cc7
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c34:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d046      	beq.n	8001cca <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001c3c:	2301      	movs	r3, #1
 8001c3e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001c40:	e043      	b.n	8001cca <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c46:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001c4a:	d140      	bne.n	8001cce <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001c4c:	2301      	movs	r3, #1
 8001c4e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001c50:	e03d      	b.n	8001cce <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	699b      	ldr	r3, [r3, #24]
 8001c56:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001c5a:	d121      	bne.n	8001ca0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001c5c:	68bb      	ldr	r3, [r7, #8]
 8001c5e:	2b03      	cmp	r3, #3
 8001c60:	d837      	bhi.n	8001cd2 <DMA_CheckFifoParam+0xda>
 8001c62:	a201      	add	r2, pc, #4	; (adr r2, 8001c68 <DMA_CheckFifoParam+0x70>)
 8001c64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c68:	08001c79 	.word	0x08001c79
 8001c6c:	08001c7f 	.word	0x08001c7f
 8001c70:	08001c79 	.word	0x08001c79
 8001c74:	08001c91 	.word	0x08001c91
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001c78:	2301      	movs	r3, #1
 8001c7a:	73fb      	strb	r3, [r7, #15]
      break;
 8001c7c:	e030      	b.n	8001ce0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c82:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d025      	beq.n	8001cd6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001c8a:	2301      	movs	r3, #1
 8001c8c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001c8e:	e022      	b.n	8001cd6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c94:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001c98:	d11f      	bne.n	8001cda <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001c9a:	2301      	movs	r3, #1
 8001c9c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001c9e:	e01c      	b.n	8001cda <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001ca0:	68bb      	ldr	r3, [r7, #8]
 8001ca2:	2b02      	cmp	r3, #2
 8001ca4:	d903      	bls.n	8001cae <DMA_CheckFifoParam+0xb6>
 8001ca6:	68bb      	ldr	r3, [r7, #8]
 8001ca8:	2b03      	cmp	r3, #3
 8001caa:	d003      	beq.n	8001cb4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001cac:	e018      	b.n	8001ce0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001cae:	2301      	movs	r3, #1
 8001cb0:	73fb      	strb	r3, [r7, #15]
      break;
 8001cb2:	e015      	b.n	8001ce0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cb8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d00e      	beq.n	8001cde <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001cc0:	2301      	movs	r3, #1
 8001cc2:	73fb      	strb	r3, [r7, #15]
      break;
 8001cc4:	e00b      	b.n	8001cde <DMA_CheckFifoParam+0xe6>
      break;
 8001cc6:	bf00      	nop
 8001cc8:	e00a      	b.n	8001ce0 <DMA_CheckFifoParam+0xe8>
      break;
 8001cca:	bf00      	nop
 8001ccc:	e008      	b.n	8001ce0 <DMA_CheckFifoParam+0xe8>
      break;
 8001cce:	bf00      	nop
 8001cd0:	e006      	b.n	8001ce0 <DMA_CheckFifoParam+0xe8>
      break;
 8001cd2:	bf00      	nop
 8001cd4:	e004      	b.n	8001ce0 <DMA_CheckFifoParam+0xe8>
      break;
 8001cd6:	bf00      	nop
 8001cd8:	e002      	b.n	8001ce0 <DMA_CheckFifoParam+0xe8>
      break;   
 8001cda:	bf00      	nop
 8001cdc:	e000      	b.n	8001ce0 <DMA_CheckFifoParam+0xe8>
      break;
 8001cde:	bf00      	nop
    }
  } 
  
  return status; 
 8001ce0:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	3714      	adds	r7, #20
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cec:	4770      	bx	lr
 8001cee:	bf00      	nop

08001cf0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001cf0:	b480      	push	{r7}
 8001cf2:	b089      	sub	sp, #36	; 0x24
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]
 8001cf8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001cfe:	2300      	movs	r3, #0
 8001d00:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001d02:	2300      	movs	r3, #0
 8001d04:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d06:	2300      	movs	r3, #0
 8001d08:	61fb      	str	r3, [r7, #28]
 8001d0a:	e16b      	b.n	8001fe4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001d0c:	2201      	movs	r2, #1
 8001d0e:	69fb      	ldr	r3, [r7, #28]
 8001d10:	fa02 f303 	lsl.w	r3, r2, r3
 8001d14:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001d16:	683b      	ldr	r3, [r7, #0]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	697a      	ldr	r2, [r7, #20]
 8001d1c:	4013      	ands	r3, r2
 8001d1e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001d20:	693a      	ldr	r2, [r7, #16]
 8001d22:	697b      	ldr	r3, [r7, #20]
 8001d24:	429a      	cmp	r2, r3
 8001d26:	f040 815a 	bne.w	8001fde <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001d2a:	683b      	ldr	r3, [r7, #0]
 8001d2c:	685b      	ldr	r3, [r3, #4]
 8001d2e:	f003 0303 	and.w	r3, r3, #3
 8001d32:	2b01      	cmp	r3, #1
 8001d34:	d005      	beq.n	8001d42 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d36:	683b      	ldr	r3, [r7, #0]
 8001d38:	685b      	ldr	r3, [r3, #4]
 8001d3a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001d3e:	2b02      	cmp	r3, #2
 8001d40:	d130      	bne.n	8001da4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	689b      	ldr	r3, [r3, #8]
 8001d46:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001d48:	69fb      	ldr	r3, [r7, #28]
 8001d4a:	005b      	lsls	r3, r3, #1
 8001d4c:	2203      	movs	r2, #3
 8001d4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d52:	43db      	mvns	r3, r3
 8001d54:	69ba      	ldr	r2, [r7, #24]
 8001d56:	4013      	ands	r3, r2
 8001d58:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001d5a:	683b      	ldr	r3, [r7, #0]
 8001d5c:	68da      	ldr	r2, [r3, #12]
 8001d5e:	69fb      	ldr	r3, [r7, #28]
 8001d60:	005b      	lsls	r3, r3, #1
 8001d62:	fa02 f303 	lsl.w	r3, r2, r3
 8001d66:	69ba      	ldr	r2, [r7, #24]
 8001d68:	4313      	orrs	r3, r2
 8001d6a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	69ba      	ldr	r2, [r7, #24]
 8001d70:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	685b      	ldr	r3, [r3, #4]
 8001d76:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001d78:	2201      	movs	r2, #1
 8001d7a:	69fb      	ldr	r3, [r7, #28]
 8001d7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d80:	43db      	mvns	r3, r3
 8001d82:	69ba      	ldr	r2, [r7, #24]
 8001d84:	4013      	ands	r3, r2
 8001d86:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001d88:	683b      	ldr	r3, [r7, #0]
 8001d8a:	685b      	ldr	r3, [r3, #4]
 8001d8c:	091b      	lsrs	r3, r3, #4
 8001d8e:	f003 0201 	and.w	r2, r3, #1
 8001d92:	69fb      	ldr	r3, [r7, #28]
 8001d94:	fa02 f303 	lsl.w	r3, r2, r3
 8001d98:	69ba      	ldr	r2, [r7, #24]
 8001d9a:	4313      	orrs	r3, r2
 8001d9c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	69ba      	ldr	r2, [r7, #24]
 8001da2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001da4:	683b      	ldr	r3, [r7, #0]
 8001da6:	685b      	ldr	r3, [r3, #4]
 8001da8:	f003 0303 	and.w	r3, r3, #3
 8001dac:	2b03      	cmp	r3, #3
 8001dae:	d017      	beq.n	8001de0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	68db      	ldr	r3, [r3, #12]
 8001db4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001db6:	69fb      	ldr	r3, [r7, #28]
 8001db8:	005b      	lsls	r3, r3, #1
 8001dba:	2203      	movs	r2, #3
 8001dbc:	fa02 f303 	lsl.w	r3, r2, r3
 8001dc0:	43db      	mvns	r3, r3
 8001dc2:	69ba      	ldr	r2, [r7, #24]
 8001dc4:	4013      	ands	r3, r2
 8001dc6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001dc8:	683b      	ldr	r3, [r7, #0]
 8001dca:	689a      	ldr	r2, [r3, #8]
 8001dcc:	69fb      	ldr	r3, [r7, #28]
 8001dce:	005b      	lsls	r3, r3, #1
 8001dd0:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd4:	69ba      	ldr	r2, [r7, #24]
 8001dd6:	4313      	orrs	r3, r2
 8001dd8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	69ba      	ldr	r2, [r7, #24]
 8001dde:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001de0:	683b      	ldr	r3, [r7, #0]
 8001de2:	685b      	ldr	r3, [r3, #4]
 8001de4:	f003 0303 	and.w	r3, r3, #3
 8001de8:	2b02      	cmp	r3, #2
 8001dea:	d123      	bne.n	8001e34 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001dec:	69fb      	ldr	r3, [r7, #28]
 8001dee:	08da      	lsrs	r2, r3, #3
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	3208      	adds	r2, #8
 8001df4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001df8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001dfa:	69fb      	ldr	r3, [r7, #28]
 8001dfc:	f003 0307 	and.w	r3, r3, #7
 8001e00:	009b      	lsls	r3, r3, #2
 8001e02:	220f      	movs	r2, #15
 8001e04:	fa02 f303 	lsl.w	r3, r2, r3
 8001e08:	43db      	mvns	r3, r3
 8001e0a:	69ba      	ldr	r2, [r7, #24]
 8001e0c:	4013      	ands	r3, r2
 8001e0e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001e10:	683b      	ldr	r3, [r7, #0]
 8001e12:	691a      	ldr	r2, [r3, #16]
 8001e14:	69fb      	ldr	r3, [r7, #28]
 8001e16:	f003 0307 	and.w	r3, r3, #7
 8001e1a:	009b      	lsls	r3, r3, #2
 8001e1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e20:	69ba      	ldr	r2, [r7, #24]
 8001e22:	4313      	orrs	r3, r2
 8001e24:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001e26:	69fb      	ldr	r3, [r7, #28]
 8001e28:	08da      	lsrs	r2, r3, #3
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	3208      	adds	r2, #8
 8001e2e:	69b9      	ldr	r1, [r7, #24]
 8001e30:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001e3a:	69fb      	ldr	r3, [r7, #28]
 8001e3c:	005b      	lsls	r3, r3, #1
 8001e3e:	2203      	movs	r2, #3
 8001e40:	fa02 f303 	lsl.w	r3, r2, r3
 8001e44:	43db      	mvns	r3, r3
 8001e46:	69ba      	ldr	r2, [r7, #24]
 8001e48:	4013      	ands	r3, r2
 8001e4a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001e4c:	683b      	ldr	r3, [r7, #0]
 8001e4e:	685b      	ldr	r3, [r3, #4]
 8001e50:	f003 0203 	and.w	r2, r3, #3
 8001e54:	69fb      	ldr	r3, [r7, #28]
 8001e56:	005b      	lsls	r3, r3, #1
 8001e58:	fa02 f303 	lsl.w	r3, r2, r3
 8001e5c:	69ba      	ldr	r2, [r7, #24]
 8001e5e:	4313      	orrs	r3, r2
 8001e60:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	69ba      	ldr	r2, [r7, #24]
 8001e66:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001e68:	683b      	ldr	r3, [r7, #0]
 8001e6a:	685b      	ldr	r3, [r3, #4]
 8001e6c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	f000 80b4 	beq.w	8001fde <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e76:	2300      	movs	r3, #0
 8001e78:	60fb      	str	r3, [r7, #12]
 8001e7a:	4b60      	ldr	r3, [pc, #384]	; (8001ffc <HAL_GPIO_Init+0x30c>)
 8001e7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e7e:	4a5f      	ldr	r2, [pc, #380]	; (8001ffc <HAL_GPIO_Init+0x30c>)
 8001e80:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e84:	6453      	str	r3, [r2, #68]	; 0x44
 8001e86:	4b5d      	ldr	r3, [pc, #372]	; (8001ffc <HAL_GPIO_Init+0x30c>)
 8001e88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e8a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e8e:	60fb      	str	r3, [r7, #12]
 8001e90:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001e92:	4a5b      	ldr	r2, [pc, #364]	; (8002000 <HAL_GPIO_Init+0x310>)
 8001e94:	69fb      	ldr	r3, [r7, #28]
 8001e96:	089b      	lsrs	r3, r3, #2
 8001e98:	3302      	adds	r3, #2
 8001e9a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001ea0:	69fb      	ldr	r3, [r7, #28]
 8001ea2:	f003 0303 	and.w	r3, r3, #3
 8001ea6:	009b      	lsls	r3, r3, #2
 8001ea8:	220f      	movs	r2, #15
 8001eaa:	fa02 f303 	lsl.w	r3, r2, r3
 8001eae:	43db      	mvns	r3, r3
 8001eb0:	69ba      	ldr	r2, [r7, #24]
 8001eb2:	4013      	ands	r3, r2
 8001eb4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	4a52      	ldr	r2, [pc, #328]	; (8002004 <HAL_GPIO_Init+0x314>)
 8001eba:	4293      	cmp	r3, r2
 8001ebc:	d02b      	beq.n	8001f16 <HAL_GPIO_Init+0x226>
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	4a51      	ldr	r2, [pc, #324]	; (8002008 <HAL_GPIO_Init+0x318>)
 8001ec2:	4293      	cmp	r3, r2
 8001ec4:	d025      	beq.n	8001f12 <HAL_GPIO_Init+0x222>
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	4a50      	ldr	r2, [pc, #320]	; (800200c <HAL_GPIO_Init+0x31c>)
 8001eca:	4293      	cmp	r3, r2
 8001ecc:	d01f      	beq.n	8001f0e <HAL_GPIO_Init+0x21e>
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	4a4f      	ldr	r2, [pc, #316]	; (8002010 <HAL_GPIO_Init+0x320>)
 8001ed2:	4293      	cmp	r3, r2
 8001ed4:	d019      	beq.n	8001f0a <HAL_GPIO_Init+0x21a>
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	4a4e      	ldr	r2, [pc, #312]	; (8002014 <HAL_GPIO_Init+0x324>)
 8001eda:	4293      	cmp	r3, r2
 8001edc:	d013      	beq.n	8001f06 <HAL_GPIO_Init+0x216>
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	4a4d      	ldr	r2, [pc, #308]	; (8002018 <HAL_GPIO_Init+0x328>)
 8001ee2:	4293      	cmp	r3, r2
 8001ee4:	d00d      	beq.n	8001f02 <HAL_GPIO_Init+0x212>
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	4a4c      	ldr	r2, [pc, #304]	; (800201c <HAL_GPIO_Init+0x32c>)
 8001eea:	4293      	cmp	r3, r2
 8001eec:	d007      	beq.n	8001efe <HAL_GPIO_Init+0x20e>
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	4a4b      	ldr	r2, [pc, #300]	; (8002020 <HAL_GPIO_Init+0x330>)
 8001ef2:	4293      	cmp	r3, r2
 8001ef4:	d101      	bne.n	8001efa <HAL_GPIO_Init+0x20a>
 8001ef6:	2307      	movs	r3, #7
 8001ef8:	e00e      	b.n	8001f18 <HAL_GPIO_Init+0x228>
 8001efa:	2308      	movs	r3, #8
 8001efc:	e00c      	b.n	8001f18 <HAL_GPIO_Init+0x228>
 8001efe:	2306      	movs	r3, #6
 8001f00:	e00a      	b.n	8001f18 <HAL_GPIO_Init+0x228>
 8001f02:	2305      	movs	r3, #5
 8001f04:	e008      	b.n	8001f18 <HAL_GPIO_Init+0x228>
 8001f06:	2304      	movs	r3, #4
 8001f08:	e006      	b.n	8001f18 <HAL_GPIO_Init+0x228>
 8001f0a:	2303      	movs	r3, #3
 8001f0c:	e004      	b.n	8001f18 <HAL_GPIO_Init+0x228>
 8001f0e:	2302      	movs	r3, #2
 8001f10:	e002      	b.n	8001f18 <HAL_GPIO_Init+0x228>
 8001f12:	2301      	movs	r3, #1
 8001f14:	e000      	b.n	8001f18 <HAL_GPIO_Init+0x228>
 8001f16:	2300      	movs	r3, #0
 8001f18:	69fa      	ldr	r2, [r7, #28]
 8001f1a:	f002 0203 	and.w	r2, r2, #3
 8001f1e:	0092      	lsls	r2, r2, #2
 8001f20:	4093      	lsls	r3, r2
 8001f22:	69ba      	ldr	r2, [r7, #24]
 8001f24:	4313      	orrs	r3, r2
 8001f26:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001f28:	4935      	ldr	r1, [pc, #212]	; (8002000 <HAL_GPIO_Init+0x310>)
 8001f2a:	69fb      	ldr	r3, [r7, #28]
 8001f2c:	089b      	lsrs	r3, r3, #2
 8001f2e:	3302      	adds	r3, #2
 8001f30:	69ba      	ldr	r2, [r7, #24]
 8001f32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001f36:	4b3b      	ldr	r3, [pc, #236]	; (8002024 <HAL_GPIO_Init+0x334>)
 8001f38:	689b      	ldr	r3, [r3, #8]
 8001f3a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f3c:	693b      	ldr	r3, [r7, #16]
 8001f3e:	43db      	mvns	r3, r3
 8001f40:	69ba      	ldr	r2, [r7, #24]
 8001f42:	4013      	ands	r3, r2
 8001f44:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001f46:	683b      	ldr	r3, [r7, #0]
 8001f48:	685b      	ldr	r3, [r3, #4]
 8001f4a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d003      	beq.n	8001f5a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001f52:	69ba      	ldr	r2, [r7, #24]
 8001f54:	693b      	ldr	r3, [r7, #16]
 8001f56:	4313      	orrs	r3, r2
 8001f58:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001f5a:	4a32      	ldr	r2, [pc, #200]	; (8002024 <HAL_GPIO_Init+0x334>)
 8001f5c:	69bb      	ldr	r3, [r7, #24]
 8001f5e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001f60:	4b30      	ldr	r3, [pc, #192]	; (8002024 <HAL_GPIO_Init+0x334>)
 8001f62:	68db      	ldr	r3, [r3, #12]
 8001f64:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f66:	693b      	ldr	r3, [r7, #16]
 8001f68:	43db      	mvns	r3, r3
 8001f6a:	69ba      	ldr	r2, [r7, #24]
 8001f6c:	4013      	ands	r3, r2
 8001f6e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001f70:	683b      	ldr	r3, [r7, #0]
 8001f72:	685b      	ldr	r3, [r3, #4]
 8001f74:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d003      	beq.n	8001f84 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001f7c:	69ba      	ldr	r2, [r7, #24]
 8001f7e:	693b      	ldr	r3, [r7, #16]
 8001f80:	4313      	orrs	r3, r2
 8001f82:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001f84:	4a27      	ldr	r2, [pc, #156]	; (8002024 <HAL_GPIO_Init+0x334>)
 8001f86:	69bb      	ldr	r3, [r7, #24]
 8001f88:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001f8a:	4b26      	ldr	r3, [pc, #152]	; (8002024 <HAL_GPIO_Init+0x334>)
 8001f8c:	685b      	ldr	r3, [r3, #4]
 8001f8e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f90:	693b      	ldr	r3, [r7, #16]
 8001f92:	43db      	mvns	r3, r3
 8001f94:	69ba      	ldr	r2, [r7, #24]
 8001f96:	4013      	ands	r3, r2
 8001f98:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001f9a:	683b      	ldr	r3, [r7, #0]
 8001f9c:	685b      	ldr	r3, [r3, #4]
 8001f9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d003      	beq.n	8001fae <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001fa6:	69ba      	ldr	r2, [r7, #24]
 8001fa8:	693b      	ldr	r3, [r7, #16]
 8001faa:	4313      	orrs	r3, r2
 8001fac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001fae:	4a1d      	ldr	r2, [pc, #116]	; (8002024 <HAL_GPIO_Init+0x334>)
 8001fb0:	69bb      	ldr	r3, [r7, #24]
 8001fb2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001fb4:	4b1b      	ldr	r3, [pc, #108]	; (8002024 <HAL_GPIO_Init+0x334>)
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001fba:	693b      	ldr	r3, [r7, #16]
 8001fbc:	43db      	mvns	r3, r3
 8001fbe:	69ba      	ldr	r2, [r7, #24]
 8001fc0:	4013      	ands	r3, r2
 8001fc2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001fc4:	683b      	ldr	r3, [r7, #0]
 8001fc6:	685b      	ldr	r3, [r3, #4]
 8001fc8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d003      	beq.n	8001fd8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001fd0:	69ba      	ldr	r2, [r7, #24]
 8001fd2:	693b      	ldr	r3, [r7, #16]
 8001fd4:	4313      	orrs	r3, r2
 8001fd6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001fd8:	4a12      	ldr	r2, [pc, #72]	; (8002024 <HAL_GPIO_Init+0x334>)
 8001fda:	69bb      	ldr	r3, [r7, #24]
 8001fdc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001fde:	69fb      	ldr	r3, [r7, #28]
 8001fe0:	3301      	adds	r3, #1
 8001fe2:	61fb      	str	r3, [r7, #28]
 8001fe4:	69fb      	ldr	r3, [r7, #28]
 8001fe6:	2b0f      	cmp	r3, #15
 8001fe8:	f67f ae90 	bls.w	8001d0c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001fec:	bf00      	nop
 8001fee:	bf00      	nop
 8001ff0:	3724      	adds	r7, #36	; 0x24
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff8:	4770      	bx	lr
 8001ffa:	bf00      	nop
 8001ffc:	40023800 	.word	0x40023800
 8002000:	40013800 	.word	0x40013800
 8002004:	40020000 	.word	0x40020000
 8002008:	40020400 	.word	0x40020400
 800200c:	40020800 	.word	0x40020800
 8002010:	40020c00 	.word	0x40020c00
 8002014:	40021000 	.word	0x40021000
 8002018:	40021400 	.word	0x40021400
 800201c:	40021800 	.word	0x40021800
 8002020:	40021c00 	.word	0x40021c00
 8002024:	40013c00 	.word	0x40013c00

08002028 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002028:	b580      	push	{r7, lr}
 800202a:	b086      	sub	sp, #24
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	2b00      	cmp	r3, #0
 8002034:	d101      	bne.n	800203a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002036:	2301      	movs	r3, #1
 8002038:	e267      	b.n	800250a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f003 0301 	and.w	r3, r3, #1
 8002042:	2b00      	cmp	r3, #0
 8002044:	d075      	beq.n	8002132 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002046:	4b88      	ldr	r3, [pc, #544]	; (8002268 <HAL_RCC_OscConfig+0x240>)
 8002048:	689b      	ldr	r3, [r3, #8]
 800204a:	f003 030c 	and.w	r3, r3, #12
 800204e:	2b04      	cmp	r3, #4
 8002050:	d00c      	beq.n	800206c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002052:	4b85      	ldr	r3, [pc, #532]	; (8002268 <HAL_RCC_OscConfig+0x240>)
 8002054:	689b      	ldr	r3, [r3, #8]
 8002056:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800205a:	2b08      	cmp	r3, #8
 800205c:	d112      	bne.n	8002084 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800205e:	4b82      	ldr	r3, [pc, #520]	; (8002268 <HAL_RCC_OscConfig+0x240>)
 8002060:	685b      	ldr	r3, [r3, #4]
 8002062:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002066:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800206a:	d10b      	bne.n	8002084 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800206c:	4b7e      	ldr	r3, [pc, #504]	; (8002268 <HAL_RCC_OscConfig+0x240>)
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002074:	2b00      	cmp	r3, #0
 8002076:	d05b      	beq.n	8002130 <HAL_RCC_OscConfig+0x108>
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	685b      	ldr	r3, [r3, #4]
 800207c:	2b00      	cmp	r3, #0
 800207e:	d157      	bne.n	8002130 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002080:	2301      	movs	r3, #1
 8002082:	e242      	b.n	800250a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	685b      	ldr	r3, [r3, #4]
 8002088:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800208c:	d106      	bne.n	800209c <HAL_RCC_OscConfig+0x74>
 800208e:	4b76      	ldr	r3, [pc, #472]	; (8002268 <HAL_RCC_OscConfig+0x240>)
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	4a75      	ldr	r2, [pc, #468]	; (8002268 <HAL_RCC_OscConfig+0x240>)
 8002094:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002098:	6013      	str	r3, [r2, #0]
 800209a:	e01d      	b.n	80020d8 <HAL_RCC_OscConfig+0xb0>
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	685b      	ldr	r3, [r3, #4]
 80020a0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80020a4:	d10c      	bne.n	80020c0 <HAL_RCC_OscConfig+0x98>
 80020a6:	4b70      	ldr	r3, [pc, #448]	; (8002268 <HAL_RCC_OscConfig+0x240>)
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	4a6f      	ldr	r2, [pc, #444]	; (8002268 <HAL_RCC_OscConfig+0x240>)
 80020ac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80020b0:	6013      	str	r3, [r2, #0]
 80020b2:	4b6d      	ldr	r3, [pc, #436]	; (8002268 <HAL_RCC_OscConfig+0x240>)
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	4a6c      	ldr	r2, [pc, #432]	; (8002268 <HAL_RCC_OscConfig+0x240>)
 80020b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020bc:	6013      	str	r3, [r2, #0]
 80020be:	e00b      	b.n	80020d8 <HAL_RCC_OscConfig+0xb0>
 80020c0:	4b69      	ldr	r3, [pc, #420]	; (8002268 <HAL_RCC_OscConfig+0x240>)
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	4a68      	ldr	r2, [pc, #416]	; (8002268 <HAL_RCC_OscConfig+0x240>)
 80020c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80020ca:	6013      	str	r3, [r2, #0]
 80020cc:	4b66      	ldr	r3, [pc, #408]	; (8002268 <HAL_RCC_OscConfig+0x240>)
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	4a65      	ldr	r2, [pc, #404]	; (8002268 <HAL_RCC_OscConfig+0x240>)
 80020d2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80020d6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	685b      	ldr	r3, [r3, #4]
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d013      	beq.n	8002108 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020e0:	f7fe fd6c 	bl	8000bbc <HAL_GetTick>
 80020e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020e6:	e008      	b.n	80020fa <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80020e8:	f7fe fd68 	bl	8000bbc <HAL_GetTick>
 80020ec:	4602      	mov	r2, r0
 80020ee:	693b      	ldr	r3, [r7, #16]
 80020f0:	1ad3      	subs	r3, r2, r3
 80020f2:	2b64      	cmp	r3, #100	; 0x64
 80020f4:	d901      	bls.n	80020fa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80020f6:	2303      	movs	r3, #3
 80020f8:	e207      	b.n	800250a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020fa:	4b5b      	ldr	r3, [pc, #364]	; (8002268 <HAL_RCC_OscConfig+0x240>)
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002102:	2b00      	cmp	r3, #0
 8002104:	d0f0      	beq.n	80020e8 <HAL_RCC_OscConfig+0xc0>
 8002106:	e014      	b.n	8002132 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002108:	f7fe fd58 	bl	8000bbc <HAL_GetTick>
 800210c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800210e:	e008      	b.n	8002122 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002110:	f7fe fd54 	bl	8000bbc <HAL_GetTick>
 8002114:	4602      	mov	r2, r0
 8002116:	693b      	ldr	r3, [r7, #16]
 8002118:	1ad3      	subs	r3, r2, r3
 800211a:	2b64      	cmp	r3, #100	; 0x64
 800211c:	d901      	bls.n	8002122 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800211e:	2303      	movs	r3, #3
 8002120:	e1f3      	b.n	800250a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002122:	4b51      	ldr	r3, [pc, #324]	; (8002268 <HAL_RCC_OscConfig+0x240>)
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800212a:	2b00      	cmp	r3, #0
 800212c:	d1f0      	bne.n	8002110 <HAL_RCC_OscConfig+0xe8>
 800212e:	e000      	b.n	8002132 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002130:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f003 0302 	and.w	r3, r3, #2
 800213a:	2b00      	cmp	r3, #0
 800213c:	d063      	beq.n	8002206 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800213e:	4b4a      	ldr	r3, [pc, #296]	; (8002268 <HAL_RCC_OscConfig+0x240>)
 8002140:	689b      	ldr	r3, [r3, #8]
 8002142:	f003 030c 	and.w	r3, r3, #12
 8002146:	2b00      	cmp	r3, #0
 8002148:	d00b      	beq.n	8002162 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800214a:	4b47      	ldr	r3, [pc, #284]	; (8002268 <HAL_RCC_OscConfig+0x240>)
 800214c:	689b      	ldr	r3, [r3, #8]
 800214e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002152:	2b08      	cmp	r3, #8
 8002154:	d11c      	bne.n	8002190 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002156:	4b44      	ldr	r3, [pc, #272]	; (8002268 <HAL_RCC_OscConfig+0x240>)
 8002158:	685b      	ldr	r3, [r3, #4]
 800215a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800215e:	2b00      	cmp	r3, #0
 8002160:	d116      	bne.n	8002190 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002162:	4b41      	ldr	r3, [pc, #260]	; (8002268 <HAL_RCC_OscConfig+0x240>)
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f003 0302 	and.w	r3, r3, #2
 800216a:	2b00      	cmp	r3, #0
 800216c:	d005      	beq.n	800217a <HAL_RCC_OscConfig+0x152>
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	68db      	ldr	r3, [r3, #12]
 8002172:	2b01      	cmp	r3, #1
 8002174:	d001      	beq.n	800217a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002176:	2301      	movs	r3, #1
 8002178:	e1c7      	b.n	800250a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800217a:	4b3b      	ldr	r3, [pc, #236]	; (8002268 <HAL_RCC_OscConfig+0x240>)
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	691b      	ldr	r3, [r3, #16]
 8002186:	00db      	lsls	r3, r3, #3
 8002188:	4937      	ldr	r1, [pc, #220]	; (8002268 <HAL_RCC_OscConfig+0x240>)
 800218a:	4313      	orrs	r3, r2
 800218c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800218e:	e03a      	b.n	8002206 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	68db      	ldr	r3, [r3, #12]
 8002194:	2b00      	cmp	r3, #0
 8002196:	d020      	beq.n	80021da <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002198:	4b34      	ldr	r3, [pc, #208]	; (800226c <HAL_RCC_OscConfig+0x244>)
 800219a:	2201      	movs	r2, #1
 800219c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800219e:	f7fe fd0d 	bl	8000bbc <HAL_GetTick>
 80021a2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021a4:	e008      	b.n	80021b8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80021a6:	f7fe fd09 	bl	8000bbc <HAL_GetTick>
 80021aa:	4602      	mov	r2, r0
 80021ac:	693b      	ldr	r3, [r7, #16]
 80021ae:	1ad3      	subs	r3, r2, r3
 80021b0:	2b02      	cmp	r3, #2
 80021b2:	d901      	bls.n	80021b8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80021b4:	2303      	movs	r3, #3
 80021b6:	e1a8      	b.n	800250a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021b8:	4b2b      	ldr	r3, [pc, #172]	; (8002268 <HAL_RCC_OscConfig+0x240>)
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f003 0302 	and.w	r3, r3, #2
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d0f0      	beq.n	80021a6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021c4:	4b28      	ldr	r3, [pc, #160]	; (8002268 <HAL_RCC_OscConfig+0x240>)
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	691b      	ldr	r3, [r3, #16]
 80021d0:	00db      	lsls	r3, r3, #3
 80021d2:	4925      	ldr	r1, [pc, #148]	; (8002268 <HAL_RCC_OscConfig+0x240>)
 80021d4:	4313      	orrs	r3, r2
 80021d6:	600b      	str	r3, [r1, #0]
 80021d8:	e015      	b.n	8002206 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80021da:	4b24      	ldr	r3, [pc, #144]	; (800226c <HAL_RCC_OscConfig+0x244>)
 80021dc:	2200      	movs	r2, #0
 80021de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021e0:	f7fe fcec 	bl	8000bbc <HAL_GetTick>
 80021e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80021e6:	e008      	b.n	80021fa <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80021e8:	f7fe fce8 	bl	8000bbc <HAL_GetTick>
 80021ec:	4602      	mov	r2, r0
 80021ee:	693b      	ldr	r3, [r7, #16]
 80021f0:	1ad3      	subs	r3, r2, r3
 80021f2:	2b02      	cmp	r3, #2
 80021f4:	d901      	bls.n	80021fa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80021f6:	2303      	movs	r3, #3
 80021f8:	e187      	b.n	800250a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80021fa:	4b1b      	ldr	r3, [pc, #108]	; (8002268 <HAL_RCC_OscConfig+0x240>)
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f003 0302 	and.w	r3, r3, #2
 8002202:	2b00      	cmp	r3, #0
 8002204:	d1f0      	bne.n	80021e8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f003 0308 	and.w	r3, r3, #8
 800220e:	2b00      	cmp	r3, #0
 8002210:	d036      	beq.n	8002280 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	695b      	ldr	r3, [r3, #20]
 8002216:	2b00      	cmp	r3, #0
 8002218:	d016      	beq.n	8002248 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800221a:	4b15      	ldr	r3, [pc, #84]	; (8002270 <HAL_RCC_OscConfig+0x248>)
 800221c:	2201      	movs	r2, #1
 800221e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002220:	f7fe fccc 	bl	8000bbc <HAL_GetTick>
 8002224:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002226:	e008      	b.n	800223a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002228:	f7fe fcc8 	bl	8000bbc <HAL_GetTick>
 800222c:	4602      	mov	r2, r0
 800222e:	693b      	ldr	r3, [r7, #16]
 8002230:	1ad3      	subs	r3, r2, r3
 8002232:	2b02      	cmp	r3, #2
 8002234:	d901      	bls.n	800223a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002236:	2303      	movs	r3, #3
 8002238:	e167      	b.n	800250a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800223a:	4b0b      	ldr	r3, [pc, #44]	; (8002268 <HAL_RCC_OscConfig+0x240>)
 800223c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800223e:	f003 0302 	and.w	r3, r3, #2
 8002242:	2b00      	cmp	r3, #0
 8002244:	d0f0      	beq.n	8002228 <HAL_RCC_OscConfig+0x200>
 8002246:	e01b      	b.n	8002280 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002248:	4b09      	ldr	r3, [pc, #36]	; (8002270 <HAL_RCC_OscConfig+0x248>)
 800224a:	2200      	movs	r2, #0
 800224c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800224e:	f7fe fcb5 	bl	8000bbc <HAL_GetTick>
 8002252:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002254:	e00e      	b.n	8002274 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002256:	f7fe fcb1 	bl	8000bbc <HAL_GetTick>
 800225a:	4602      	mov	r2, r0
 800225c:	693b      	ldr	r3, [r7, #16]
 800225e:	1ad3      	subs	r3, r2, r3
 8002260:	2b02      	cmp	r3, #2
 8002262:	d907      	bls.n	8002274 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002264:	2303      	movs	r3, #3
 8002266:	e150      	b.n	800250a <HAL_RCC_OscConfig+0x4e2>
 8002268:	40023800 	.word	0x40023800
 800226c:	42470000 	.word	0x42470000
 8002270:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002274:	4b88      	ldr	r3, [pc, #544]	; (8002498 <HAL_RCC_OscConfig+0x470>)
 8002276:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002278:	f003 0302 	and.w	r3, r3, #2
 800227c:	2b00      	cmp	r3, #0
 800227e:	d1ea      	bne.n	8002256 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f003 0304 	and.w	r3, r3, #4
 8002288:	2b00      	cmp	r3, #0
 800228a:	f000 8097 	beq.w	80023bc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800228e:	2300      	movs	r3, #0
 8002290:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002292:	4b81      	ldr	r3, [pc, #516]	; (8002498 <HAL_RCC_OscConfig+0x470>)
 8002294:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002296:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800229a:	2b00      	cmp	r3, #0
 800229c:	d10f      	bne.n	80022be <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800229e:	2300      	movs	r3, #0
 80022a0:	60bb      	str	r3, [r7, #8]
 80022a2:	4b7d      	ldr	r3, [pc, #500]	; (8002498 <HAL_RCC_OscConfig+0x470>)
 80022a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022a6:	4a7c      	ldr	r2, [pc, #496]	; (8002498 <HAL_RCC_OscConfig+0x470>)
 80022a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022ac:	6413      	str	r3, [r2, #64]	; 0x40
 80022ae:	4b7a      	ldr	r3, [pc, #488]	; (8002498 <HAL_RCC_OscConfig+0x470>)
 80022b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022b6:	60bb      	str	r3, [r7, #8]
 80022b8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80022ba:	2301      	movs	r3, #1
 80022bc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022be:	4b77      	ldr	r3, [pc, #476]	; (800249c <HAL_RCC_OscConfig+0x474>)
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d118      	bne.n	80022fc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80022ca:	4b74      	ldr	r3, [pc, #464]	; (800249c <HAL_RCC_OscConfig+0x474>)
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	4a73      	ldr	r2, [pc, #460]	; (800249c <HAL_RCC_OscConfig+0x474>)
 80022d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022d4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80022d6:	f7fe fc71 	bl	8000bbc <HAL_GetTick>
 80022da:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022dc:	e008      	b.n	80022f0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80022de:	f7fe fc6d 	bl	8000bbc <HAL_GetTick>
 80022e2:	4602      	mov	r2, r0
 80022e4:	693b      	ldr	r3, [r7, #16]
 80022e6:	1ad3      	subs	r3, r2, r3
 80022e8:	2b02      	cmp	r3, #2
 80022ea:	d901      	bls.n	80022f0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80022ec:	2303      	movs	r3, #3
 80022ee:	e10c      	b.n	800250a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022f0:	4b6a      	ldr	r3, [pc, #424]	; (800249c <HAL_RCC_OscConfig+0x474>)
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d0f0      	beq.n	80022de <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	689b      	ldr	r3, [r3, #8]
 8002300:	2b01      	cmp	r3, #1
 8002302:	d106      	bne.n	8002312 <HAL_RCC_OscConfig+0x2ea>
 8002304:	4b64      	ldr	r3, [pc, #400]	; (8002498 <HAL_RCC_OscConfig+0x470>)
 8002306:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002308:	4a63      	ldr	r2, [pc, #396]	; (8002498 <HAL_RCC_OscConfig+0x470>)
 800230a:	f043 0301 	orr.w	r3, r3, #1
 800230e:	6713      	str	r3, [r2, #112]	; 0x70
 8002310:	e01c      	b.n	800234c <HAL_RCC_OscConfig+0x324>
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	689b      	ldr	r3, [r3, #8]
 8002316:	2b05      	cmp	r3, #5
 8002318:	d10c      	bne.n	8002334 <HAL_RCC_OscConfig+0x30c>
 800231a:	4b5f      	ldr	r3, [pc, #380]	; (8002498 <HAL_RCC_OscConfig+0x470>)
 800231c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800231e:	4a5e      	ldr	r2, [pc, #376]	; (8002498 <HAL_RCC_OscConfig+0x470>)
 8002320:	f043 0304 	orr.w	r3, r3, #4
 8002324:	6713      	str	r3, [r2, #112]	; 0x70
 8002326:	4b5c      	ldr	r3, [pc, #368]	; (8002498 <HAL_RCC_OscConfig+0x470>)
 8002328:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800232a:	4a5b      	ldr	r2, [pc, #364]	; (8002498 <HAL_RCC_OscConfig+0x470>)
 800232c:	f043 0301 	orr.w	r3, r3, #1
 8002330:	6713      	str	r3, [r2, #112]	; 0x70
 8002332:	e00b      	b.n	800234c <HAL_RCC_OscConfig+0x324>
 8002334:	4b58      	ldr	r3, [pc, #352]	; (8002498 <HAL_RCC_OscConfig+0x470>)
 8002336:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002338:	4a57      	ldr	r2, [pc, #348]	; (8002498 <HAL_RCC_OscConfig+0x470>)
 800233a:	f023 0301 	bic.w	r3, r3, #1
 800233e:	6713      	str	r3, [r2, #112]	; 0x70
 8002340:	4b55      	ldr	r3, [pc, #340]	; (8002498 <HAL_RCC_OscConfig+0x470>)
 8002342:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002344:	4a54      	ldr	r2, [pc, #336]	; (8002498 <HAL_RCC_OscConfig+0x470>)
 8002346:	f023 0304 	bic.w	r3, r3, #4
 800234a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	689b      	ldr	r3, [r3, #8]
 8002350:	2b00      	cmp	r3, #0
 8002352:	d015      	beq.n	8002380 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002354:	f7fe fc32 	bl	8000bbc <HAL_GetTick>
 8002358:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800235a:	e00a      	b.n	8002372 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800235c:	f7fe fc2e 	bl	8000bbc <HAL_GetTick>
 8002360:	4602      	mov	r2, r0
 8002362:	693b      	ldr	r3, [r7, #16]
 8002364:	1ad3      	subs	r3, r2, r3
 8002366:	f241 3288 	movw	r2, #5000	; 0x1388
 800236a:	4293      	cmp	r3, r2
 800236c:	d901      	bls.n	8002372 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800236e:	2303      	movs	r3, #3
 8002370:	e0cb      	b.n	800250a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002372:	4b49      	ldr	r3, [pc, #292]	; (8002498 <HAL_RCC_OscConfig+0x470>)
 8002374:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002376:	f003 0302 	and.w	r3, r3, #2
 800237a:	2b00      	cmp	r3, #0
 800237c:	d0ee      	beq.n	800235c <HAL_RCC_OscConfig+0x334>
 800237e:	e014      	b.n	80023aa <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002380:	f7fe fc1c 	bl	8000bbc <HAL_GetTick>
 8002384:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002386:	e00a      	b.n	800239e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002388:	f7fe fc18 	bl	8000bbc <HAL_GetTick>
 800238c:	4602      	mov	r2, r0
 800238e:	693b      	ldr	r3, [r7, #16]
 8002390:	1ad3      	subs	r3, r2, r3
 8002392:	f241 3288 	movw	r2, #5000	; 0x1388
 8002396:	4293      	cmp	r3, r2
 8002398:	d901      	bls.n	800239e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800239a:	2303      	movs	r3, #3
 800239c:	e0b5      	b.n	800250a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800239e:	4b3e      	ldr	r3, [pc, #248]	; (8002498 <HAL_RCC_OscConfig+0x470>)
 80023a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023a2:	f003 0302 	and.w	r3, r3, #2
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d1ee      	bne.n	8002388 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80023aa:	7dfb      	ldrb	r3, [r7, #23]
 80023ac:	2b01      	cmp	r3, #1
 80023ae:	d105      	bne.n	80023bc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80023b0:	4b39      	ldr	r3, [pc, #228]	; (8002498 <HAL_RCC_OscConfig+0x470>)
 80023b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023b4:	4a38      	ldr	r2, [pc, #224]	; (8002498 <HAL_RCC_OscConfig+0x470>)
 80023b6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80023ba:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	699b      	ldr	r3, [r3, #24]
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	f000 80a1 	beq.w	8002508 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80023c6:	4b34      	ldr	r3, [pc, #208]	; (8002498 <HAL_RCC_OscConfig+0x470>)
 80023c8:	689b      	ldr	r3, [r3, #8]
 80023ca:	f003 030c 	and.w	r3, r3, #12
 80023ce:	2b08      	cmp	r3, #8
 80023d0:	d05c      	beq.n	800248c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	699b      	ldr	r3, [r3, #24]
 80023d6:	2b02      	cmp	r3, #2
 80023d8:	d141      	bne.n	800245e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023da:	4b31      	ldr	r3, [pc, #196]	; (80024a0 <HAL_RCC_OscConfig+0x478>)
 80023dc:	2200      	movs	r2, #0
 80023de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023e0:	f7fe fbec 	bl	8000bbc <HAL_GetTick>
 80023e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80023e6:	e008      	b.n	80023fa <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80023e8:	f7fe fbe8 	bl	8000bbc <HAL_GetTick>
 80023ec:	4602      	mov	r2, r0
 80023ee:	693b      	ldr	r3, [r7, #16]
 80023f0:	1ad3      	subs	r3, r2, r3
 80023f2:	2b02      	cmp	r3, #2
 80023f4:	d901      	bls.n	80023fa <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80023f6:	2303      	movs	r3, #3
 80023f8:	e087      	b.n	800250a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80023fa:	4b27      	ldr	r3, [pc, #156]	; (8002498 <HAL_RCC_OscConfig+0x470>)
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002402:	2b00      	cmp	r3, #0
 8002404:	d1f0      	bne.n	80023e8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	69da      	ldr	r2, [r3, #28]
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	6a1b      	ldr	r3, [r3, #32]
 800240e:	431a      	orrs	r2, r3
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002414:	019b      	lsls	r3, r3, #6
 8002416:	431a      	orrs	r2, r3
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800241c:	085b      	lsrs	r3, r3, #1
 800241e:	3b01      	subs	r3, #1
 8002420:	041b      	lsls	r3, r3, #16
 8002422:	431a      	orrs	r2, r3
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002428:	061b      	lsls	r3, r3, #24
 800242a:	491b      	ldr	r1, [pc, #108]	; (8002498 <HAL_RCC_OscConfig+0x470>)
 800242c:	4313      	orrs	r3, r2
 800242e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002430:	4b1b      	ldr	r3, [pc, #108]	; (80024a0 <HAL_RCC_OscConfig+0x478>)
 8002432:	2201      	movs	r2, #1
 8002434:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002436:	f7fe fbc1 	bl	8000bbc <HAL_GetTick>
 800243a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800243c:	e008      	b.n	8002450 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800243e:	f7fe fbbd 	bl	8000bbc <HAL_GetTick>
 8002442:	4602      	mov	r2, r0
 8002444:	693b      	ldr	r3, [r7, #16]
 8002446:	1ad3      	subs	r3, r2, r3
 8002448:	2b02      	cmp	r3, #2
 800244a:	d901      	bls.n	8002450 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800244c:	2303      	movs	r3, #3
 800244e:	e05c      	b.n	800250a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002450:	4b11      	ldr	r3, [pc, #68]	; (8002498 <HAL_RCC_OscConfig+0x470>)
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002458:	2b00      	cmp	r3, #0
 800245a:	d0f0      	beq.n	800243e <HAL_RCC_OscConfig+0x416>
 800245c:	e054      	b.n	8002508 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800245e:	4b10      	ldr	r3, [pc, #64]	; (80024a0 <HAL_RCC_OscConfig+0x478>)
 8002460:	2200      	movs	r2, #0
 8002462:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002464:	f7fe fbaa 	bl	8000bbc <HAL_GetTick>
 8002468:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800246a:	e008      	b.n	800247e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800246c:	f7fe fba6 	bl	8000bbc <HAL_GetTick>
 8002470:	4602      	mov	r2, r0
 8002472:	693b      	ldr	r3, [r7, #16]
 8002474:	1ad3      	subs	r3, r2, r3
 8002476:	2b02      	cmp	r3, #2
 8002478:	d901      	bls.n	800247e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800247a:	2303      	movs	r3, #3
 800247c:	e045      	b.n	800250a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800247e:	4b06      	ldr	r3, [pc, #24]	; (8002498 <HAL_RCC_OscConfig+0x470>)
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002486:	2b00      	cmp	r3, #0
 8002488:	d1f0      	bne.n	800246c <HAL_RCC_OscConfig+0x444>
 800248a:	e03d      	b.n	8002508 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	699b      	ldr	r3, [r3, #24]
 8002490:	2b01      	cmp	r3, #1
 8002492:	d107      	bne.n	80024a4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002494:	2301      	movs	r3, #1
 8002496:	e038      	b.n	800250a <HAL_RCC_OscConfig+0x4e2>
 8002498:	40023800 	.word	0x40023800
 800249c:	40007000 	.word	0x40007000
 80024a0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80024a4:	4b1b      	ldr	r3, [pc, #108]	; (8002514 <HAL_RCC_OscConfig+0x4ec>)
 80024a6:	685b      	ldr	r3, [r3, #4]
 80024a8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	699b      	ldr	r3, [r3, #24]
 80024ae:	2b01      	cmp	r3, #1
 80024b0:	d028      	beq.n	8002504 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80024bc:	429a      	cmp	r2, r3
 80024be:	d121      	bne.n	8002504 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80024ca:	429a      	cmp	r2, r3
 80024cc:	d11a      	bne.n	8002504 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80024ce:	68fa      	ldr	r2, [r7, #12]
 80024d0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80024d4:	4013      	ands	r3, r2
 80024d6:	687a      	ldr	r2, [r7, #4]
 80024d8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80024da:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80024dc:	4293      	cmp	r3, r2
 80024de:	d111      	bne.n	8002504 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024ea:	085b      	lsrs	r3, r3, #1
 80024ec:	3b01      	subs	r3, #1
 80024ee:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80024f0:	429a      	cmp	r2, r3
 80024f2:	d107      	bne.n	8002504 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024fe:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002500:	429a      	cmp	r2, r3
 8002502:	d001      	beq.n	8002508 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002504:	2301      	movs	r3, #1
 8002506:	e000      	b.n	800250a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002508:	2300      	movs	r3, #0
}
 800250a:	4618      	mov	r0, r3
 800250c:	3718      	adds	r7, #24
 800250e:	46bd      	mov	sp, r7
 8002510:	bd80      	pop	{r7, pc}
 8002512:	bf00      	nop
 8002514:	40023800 	.word	0x40023800

08002518 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002518:	b580      	push	{r7, lr}
 800251a:	b084      	sub	sp, #16
 800251c:	af00      	add	r7, sp, #0
 800251e:	6078      	str	r0, [r7, #4]
 8002520:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	2b00      	cmp	r3, #0
 8002526:	d101      	bne.n	800252c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002528:	2301      	movs	r3, #1
 800252a:	e0cc      	b.n	80026c6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800252c:	4b68      	ldr	r3, [pc, #416]	; (80026d0 <HAL_RCC_ClockConfig+0x1b8>)
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f003 0307 	and.w	r3, r3, #7
 8002534:	683a      	ldr	r2, [r7, #0]
 8002536:	429a      	cmp	r2, r3
 8002538:	d90c      	bls.n	8002554 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800253a:	4b65      	ldr	r3, [pc, #404]	; (80026d0 <HAL_RCC_ClockConfig+0x1b8>)
 800253c:	683a      	ldr	r2, [r7, #0]
 800253e:	b2d2      	uxtb	r2, r2
 8002540:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002542:	4b63      	ldr	r3, [pc, #396]	; (80026d0 <HAL_RCC_ClockConfig+0x1b8>)
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f003 0307 	and.w	r3, r3, #7
 800254a:	683a      	ldr	r2, [r7, #0]
 800254c:	429a      	cmp	r2, r3
 800254e:	d001      	beq.n	8002554 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002550:	2301      	movs	r3, #1
 8002552:	e0b8      	b.n	80026c6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f003 0302 	and.w	r3, r3, #2
 800255c:	2b00      	cmp	r3, #0
 800255e:	d020      	beq.n	80025a2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f003 0304 	and.w	r3, r3, #4
 8002568:	2b00      	cmp	r3, #0
 800256a:	d005      	beq.n	8002578 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800256c:	4b59      	ldr	r3, [pc, #356]	; (80026d4 <HAL_RCC_ClockConfig+0x1bc>)
 800256e:	689b      	ldr	r3, [r3, #8]
 8002570:	4a58      	ldr	r2, [pc, #352]	; (80026d4 <HAL_RCC_ClockConfig+0x1bc>)
 8002572:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002576:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f003 0308 	and.w	r3, r3, #8
 8002580:	2b00      	cmp	r3, #0
 8002582:	d005      	beq.n	8002590 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002584:	4b53      	ldr	r3, [pc, #332]	; (80026d4 <HAL_RCC_ClockConfig+0x1bc>)
 8002586:	689b      	ldr	r3, [r3, #8]
 8002588:	4a52      	ldr	r2, [pc, #328]	; (80026d4 <HAL_RCC_ClockConfig+0x1bc>)
 800258a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800258e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002590:	4b50      	ldr	r3, [pc, #320]	; (80026d4 <HAL_RCC_ClockConfig+0x1bc>)
 8002592:	689b      	ldr	r3, [r3, #8]
 8002594:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	689b      	ldr	r3, [r3, #8]
 800259c:	494d      	ldr	r1, [pc, #308]	; (80026d4 <HAL_RCC_ClockConfig+0x1bc>)
 800259e:	4313      	orrs	r3, r2
 80025a0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f003 0301 	and.w	r3, r3, #1
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d044      	beq.n	8002638 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	685b      	ldr	r3, [r3, #4]
 80025b2:	2b01      	cmp	r3, #1
 80025b4:	d107      	bne.n	80025c6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025b6:	4b47      	ldr	r3, [pc, #284]	; (80026d4 <HAL_RCC_ClockConfig+0x1bc>)
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d119      	bne.n	80025f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80025c2:	2301      	movs	r3, #1
 80025c4:	e07f      	b.n	80026c6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	685b      	ldr	r3, [r3, #4]
 80025ca:	2b02      	cmp	r3, #2
 80025cc:	d003      	beq.n	80025d6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80025d2:	2b03      	cmp	r3, #3
 80025d4:	d107      	bne.n	80025e6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80025d6:	4b3f      	ldr	r3, [pc, #252]	; (80026d4 <HAL_RCC_ClockConfig+0x1bc>)
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d109      	bne.n	80025f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80025e2:	2301      	movs	r3, #1
 80025e4:	e06f      	b.n	80026c6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025e6:	4b3b      	ldr	r3, [pc, #236]	; (80026d4 <HAL_RCC_ClockConfig+0x1bc>)
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f003 0302 	and.w	r3, r3, #2
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d101      	bne.n	80025f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80025f2:	2301      	movs	r3, #1
 80025f4:	e067      	b.n	80026c6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80025f6:	4b37      	ldr	r3, [pc, #220]	; (80026d4 <HAL_RCC_ClockConfig+0x1bc>)
 80025f8:	689b      	ldr	r3, [r3, #8]
 80025fa:	f023 0203 	bic.w	r2, r3, #3
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	685b      	ldr	r3, [r3, #4]
 8002602:	4934      	ldr	r1, [pc, #208]	; (80026d4 <HAL_RCC_ClockConfig+0x1bc>)
 8002604:	4313      	orrs	r3, r2
 8002606:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002608:	f7fe fad8 	bl	8000bbc <HAL_GetTick>
 800260c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800260e:	e00a      	b.n	8002626 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002610:	f7fe fad4 	bl	8000bbc <HAL_GetTick>
 8002614:	4602      	mov	r2, r0
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	1ad3      	subs	r3, r2, r3
 800261a:	f241 3288 	movw	r2, #5000	; 0x1388
 800261e:	4293      	cmp	r3, r2
 8002620:	d901      	bls.n	8002626 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002622:	2303      	movs	r3, #3
 8002624:	e04f      	b.n	80026c6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002626:	4b2b      	ldr	r3, [pc, #172]	; (80026d4 <HAL_RCC_ClockConfig+0x1bc>)
 8002628:	689b      	ldr	r3, [r3, #8]
 800262a:	f003 020c 	and.w	r2, r3, #12
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	685b      	ldr	r3, [r3, #4]
 8002632:	009b      	lsls	r3, r3, #2
 8002634:	429a      	cmp	r2, r3
 8002636:	d1eb      	bne.n	8002610 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002638:	4b25      	ldr	r3, [pc, #148]	; (80026d0 <HAL_RCC_ClockConfig+0x1b8>)
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f003 0307 	and.w	r3, r3, #7
 8002640:	683a      	ldr	r2, [r7, #0]
 8002642:	429a      	cmp	r2, r3
 8002644:	d20c      	bcs.n	8002660 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002646:	4b22      	ldr	r3, [pc, #136]	; (80026d0 <HAL_RCC_ClockConfig+0x1b8>)
 8002648:	683a      	ldr	r2, [r7, #0]
 800264a:	b2d2      	uxtb	r2, r2
 800264c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800264e:	4b20      	ldr	r3, [pc, #128]	; (80026d0 <HAL_RCC_ClockConfig+0x1b8>)
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f003 0307 	and.w	r3, r3, #7
 8002656:	683a      	ldr	r2, [r7, #0]
 8002658:	429a      	cmp	r2, r3
 800265a:	d001      	beq.n	8002660 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800265c:	2301      	movs	r3, #1
 800265e:	e032      	b.n	80026c6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f003 0304 	and.w	r3, r3, #4
 8002668:	2b00      	cmp	r3, #0
 800266a:	d008      	beq.n	800267e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800266c:	4b19      	ldr	r3, [pc, #100]	; (80026d4 <HAL_RCC_ClockConfig+0x1bc>)
 800266e:	689b      	ldr	r3, [r3, #8]
 8002670:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	68db      	ldr	r3, [r3, #12]
 8002678:	4916      	ldr	r1, [pc, #88]	; (80026d4 <HAL_RCC_ClockConfig+0x1bc>)
 800267a:	4313      	orrs	r3, r2
 800267c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f003 0308 	and.w	r3, r3, #8
 8002686:	2b00      	cmp	r3, #0
 8002688:	d009      	beq.n	800269e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800268a:	4b12      	ldr	r3, [pc, #72]	; (80026d4 <HAL_RCC_ClockConfig+0x1bc>)
 800268c:	689b      	ldr	r3, [r3, #8]
 800268e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	691b      	ldr	r3, [r3, #16]
 8002696:	00db      	lsls	r3, r3, #3
 8002698:	490e      	ldr	r1, [pc, #56]	; (80026d4 <HAL_RCC_ClockConfig+0x1bc>)
 800269a:	4313      	orrs	r3, r2
 800269c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800269e:	f000 f821 	bl	80026e4 <HAL_RCC_GetSysClockFreq>
 80026a2:	4602      	mov	r2, r0
 80026a4:	4b0b      	ldr	r3, [pc, #44]	; (80026d4 <HAL_RCC_ClockConfig+0x1bc>)
 80026a6:	689b      	ldr	r3, [r3, #8]
 80026a8:	091b      	lsrs	r3, r3, #4
 80026aa:	f003 030f 	and.w	r3, r3, #15
 80026ae:	490a      	ldr	r1, [pc, #40]	; (80026d8 <HAL_RCC_ClockConfig+0x1c0>)
 80026b0:	5ccb      	ldrb	r3, [r1, r3]
 80026b2:	fa22 f303 	lsr.w	r3, r2, r3
 80026b6:	4a09      	ldr	r2, [pc, #36]	; (80026dc <HAL_RCC_ClockConfig+0x1c4>)
 80026b8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80026ba:	4b09      	ldr	r3, [pc, #36]	; (80026e0 <HAL_RCC_ClockConfig+0x1c8>)
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	4618      	mov	r0, r3
 80026c0:	f7fe fa38 	bl	8000b34 <HAL_InitTick>

  return HAL_OK;
 80026c4:	2300      	movs	r3, #0
}
 80026c6:	4618      	mov	r0, r3
 80026c8:	3710      	adds	r7, #16
 80026ca:	46bd      	mov	sp, r7
 80026cc:	bd80      	pop	{r7, pc}
 80026ce:	bf00      	nop
 80026d0:	40023c00 	.word	0x40023c00
 80026d4:	40023800 	.word	0x40023800
 80026d8:	080039f0 	.word	0x080039f0
 80026dc:	20000000 	.word	0x20000000
 80026e0:	20000004 	.word	0x20000004

080026e4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80026e4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80026e8:	b094      	sub	sp, #80	; 0x50
 80026ea:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80026ec:	2300      	movs	r3, #0
 80026ee:	647b      	str	r3, [r7, #68]	; 0x44
 80026f0:	2300      	movs	r3, #0
 80026f2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80026f4:	2300      	movs	r3, #0
 80026f6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80026f8:	2300      	movs	r3, #0
 80026fa:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80026fc:	4b79      	ldr	r3, [pc, #484]	; (80028e4 <HAL_RCC_GetSysClockFreq+0x200>)
 80026fe:	689b      	ldr	r3, [r3, #8]
 8002700:	f003 030c 	and.w	r3, r3, #12
 8002704:	2b08      	cmp	r3, #8
 8002706:	d00d      	beq.n	8002724 <HAL_RCC_GetSysClockFreq+0x40>
 8002708:	2b08      	cmp	r3, #8
 800270a:	f200 80e1 	bhi.w	80028d0 <HAL_RCC_GetSysClockFreq+0x1ec>
 800270e:	2b00      	cmp	r3, #0
 8002710:	d002      	beq.n	8002718 <HAL_RCC_GetSysClockFreq+0x34>
 8002712:	2b04      	cmp	r3, #4
 8002714:	d003      	beq.n	800271e <HAL_RCC_GetSysClockFreq+0x3a>
 8002716:	e0db      	b.n	80028d0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002718:	4b73      	ldr	r3, [pc, #460]	; (80028e8 <HAL_RCC_GetSysClockFreq+0x204>)
 800271a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 800271c:	e0db      	b.n	80028d6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800271e:	4b73      	ldr	r3, [pc, #460]	; (80028ec <HAL_RCC_GetSysClockFreq+0x208>)
 8002720:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002722:	e0d8      	b.n	80028d6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002724:	4b6f      	ldr	r3, [pc, #444]	; (80028e4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002726:	685b      	ldr	r3, [r3, #4]
 8002728:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800272c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800272e:	4b6d      	ldr	r3, [pc, #436]	; (80028e4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002730:	685b      	ldr	r3, [r3, #4]
 8002732:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002736:	2b00      	cmp	r3, #0
 8002738:	d063      	beq.n	8002802 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800273a:	4b6a      	ldr	r3, [pc, #424]	; (80028e4 <HAL_RCC_GetSysClockFreq+0x200>)
 800273c:	685b      	ldr	r3, [r3, #4]
 800273e:	099b      	lsrs	r3, r3, #6
 8002740:	2200      	movs	r2, #0
 8002742:	63bb      	str	r3, [r7, #56]	; 0x38
 8002744:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002746:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002748:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800274c:	633b      	str	r3, [r7, #48]	; 0x30
 800274e:	2300      	movs	r3, #0
 8002750:	637b      	str	r3, [r7, #52]	; 0x34
 8002752:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002756:	4622      	mov	r2, r4
 8002758:	462b      	mov	r3, r5
 800275a:	f04f 0000 	mov.w	r0, #0
 800275e:	f04f 0100 	mov.w	r1, #0
 8002762:	0159      	lsls	r1, r3, #5
 8002764:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002768:	0150      	lsls	r0, r2, #5
 800276a:	4602      	mov	r2, r0
 800276c:	460b      	mov	r3, r1
 800276e:	4621      	mov	r1, r4
 8002770:	1a51      	subs	r1, r2, r1
 8002772:	6139      	str	r1, [r7, #16]
 8002774:	4629      	mov	r1, r5
 8002776:	eb63 0301 	sbc.w	r3, r3, r1
 800277a:	617b      	str	r3, [r7, #20]
 800277c:	f04f 0200 	mov.w	r2, #0
 8002780:	f04f 0300 	mov.w	r3, #0
 8002784:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002788:	4659      	mov	r1, fp
 800278a:	018b      	lsls	r3, r1, #6
 800278c:	4651      	mov	r1, sl
 800278e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002792:	4651      	mov	r1, sl
 8002794:	018a      	lsls	r2, r1, #6
 8002796:	4651      	mov	r1, sl
 8002798:	ebb2 0801 	subs.w	r8, r2, r1
 800279c:	4659      	mov	r1, fp
 800279e:	eb63 0901 	sbc.w	r9, r3, r1
 80027a2:	f04f 0200 	mov.w	r2, #0
 80027a6:	f04f 0300 	mov.w	r3, #0
 80027aa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80027ae:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80027b2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80027b6:	4690      	mov	r8, r2
 80027b8:	4699      	mov	r9, r3
 80027ba:	4623      	mov	r3, r4
 80027bc:	eb18 0303 	adds.w	r3, r8, r3
 80027c0:	60bb      	str	r3, [r7, #8]
 80027c2:	462b      	mov	r3, r5
 80027c4:	eb49 0303 	adc.w	r3, r9, r3
 80027c8:	60fb      	str	r3, [r7, #12]
 80027ca:	f04f 0200 	mov.w	r2, #0
 80027ce:	f04f 0300 	mov.w	r3, #0
 80027d2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80027d6:	4629      	mov	r1, r5
 80027d8:	024b      	lsls	r3, r1, #9
 80027da:	4621      	mov	r1, r4
 80027dc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80027e0:	4621      	mov	r1, r4
 80027e2:	024a      	lsls	r2, r1, #9
 80027e4:	4610      	mov	r0, r2
 80027e6:	4619      	mov	r1, r3
 80027e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80027ea:	2200      	movs	r2, #0
 80027ec:	62bb      	str	r3, [r7, #40]	; 0x28
 80027ee:	62fa      	str	r2, [r7, #44]	; 0x2c
 80027f0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80027f4:	f7fd fce8 	bl	80001c8 <__aeabi_uldivmod>
 80027f8:	4602      	mov	r2, r0
 80027fa:	460b      	mov	r3, r1
 80027fc:	4613      	mov	r3, r2
 80027fe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002800:	e058      	b.n	80028b4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002802:	4b38      	ldr	r3, [pc, #224]	; (80028e4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002804:	685b      	ldr	r3, [r3, #4]
 8002806:	099b      	lsrs	r3, r3, #6
 8002808:	2200      	movs	r2, #0
 800280a:	4618      	mov	r0, r3
 800280c:	4611      	mov	r1, r2
 800280e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002812:	623b      	str	r3, [r7, #32]
 8002814:	2300      	movs	r3, #0
 8002816:	627b      	str	r3, [r7, #36]	; 0x24
 8002818:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800281c:	4642      	mov	r2, r8
 800281e:	464b      	mov	r3, r9
 8002820:	f04f 0000 	mov.w	r0, #0
 8002824:	f04f 0100 	mov.w	r1, #0
 8002828:	0159      	lsls	r1, r3, #5
 800282a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800282e:	0150      	lsls	r0, r2, #5
 8002830:	4602      	mov	r2, r0
 8002832:	460b      	mov	r3, r1
 8002834:	4641      	mov	r1, r8
 8002836:	ebb2 0a01 	subs.w	sl, r2, r1
 800283a:	4649      	mov	r1, r9
 800283c:	eb63 0b01 	sbc.w	fp, r3, r1
 8002840:	f04f 0200 	mov.w	r2, #0
 8002844:	f04f 0300 	mov.w	r3, #0
 8002848:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800284c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002850:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002854:	ebb2 040a 	subs.w	r4, r2, sl
 8002858:	eb63 050b 	sbc.w	r5, r3, fp
 800285c:	f04f 0200 	mov.w	r2, #0
 8002860:	f04f 0300 	mov.w	r3, #0
 8002864:	00eb      	lsls	r3, r5, #3
 8002866:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800286a:	00e2      	lsls	r2, r4, #3
 800286c:	4614      	mov	r4, r2
 800286e:	461d      	mov	r5, r3
 8002870:	4643      	mov	r3, r8
 8002872:	18e3      	adds	r3, r4, r3
 8002874:	603b      	str	r3, [r7, #0]
 8002876:	464b      	mov	r3, r9
 8002878:	eb45 0303 	adc.w	r3, r5, r3
 800287c:	607b      	str	r3, [r7, #4]
 800287e:	f04f 0200 	mov.w	r2, #0
 8002882:	f04f 0300 	mov.w	r3, #0
 8002886:	e9d7 4500 	ldrd	r4, r5, [r7]
 800288a:	4629      	mov	r1, r5
 800288c:	028b      	lsls	r3, r1, #10
 800288e:	4621      	mov	r1, r4
 8002890:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002894:	4621      	mov	r1, r4
 8002896:	028a      	lsls	r2, r1, #10
 8002898:	4610      	mov	r0, r2
 800289a:	4619      	mov	r1, r3
 800289c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800289e:	2200      	movs	r2, #0
 80028a0:	61bb      	str	r3, [r7, #24]
 80028a2:	61fa      	str	r2, [r7, #28]
 80028a4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80028a8:	f7fd fc8e 	bl	80001c8 <__aeabi_uldivmod>
 80028ac:	4602      	mov	r2, r0
 80028ae:	460b      	mov	r3, r1
 80028b0:	4613      	mov	r3, r2
 80028b2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80028b4:	4b0b      	ldr	r3, [pc, #44]	; (80028e4 <HAL_RCC_GetSysClockFreq+0x200>)
 80028b6:	685b      	ldr	r3, [r3, #4]
 80028b8:	0c1b      	lsrs	r3, r3, #16
 80028ba:	f003 0303 	and.w	r3, r3, #3
 80028be:	3301      	adds	r3, #1
 80028c0:	005b      	lsls	r3, r3, #1
 80028c2:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80028c4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80028c6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80028c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80028cc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80028ce:	e002      	b.n	80028d6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80028d0:	4b05      	ldr	r3, [pc, #20]	; (80028e8 <HAL_RCC_GetSysClockFreq+0x204>)
 80028d2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80028d4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80028d6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80028d8:	4618      	mov	r0, r3
 80028da:	3750      	adds	r7, #80	; 0x50
 80028dc:	46bd      	mov	sp, r7
 80028de:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80028e2:	bf00      	nop
 80028e4:	40023800 	.word	0x40023800
 80028e8:	00f42400 	.word	0x00f42400
 80028ec:	007a1200 	.word	0x007a1200

080028f0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80028f0:	b480      	push	{r7}
 80028f2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80028f4:	4b03      	ldr	r3, [pc, #12]	; (8002904 <HAL_RCC_GetHCLKFreq+0x14>)
 80028f6:	681b      	ldr	r3, [r3, #0]
}
 80028f8:	4618      	mov	r0, r3
 80028fa:	46bd      	mov	sp, r7
 80028fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002900:	4770      	bx	lr
 8002902:	bf00      	nop
 8002904:	20000000 	.word	0x20000000

08002908 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002908:	b580      	push	{r7, lr}
 800290a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800290c:	f7ff fff0 	bl	80028f0 <HAL_RCC_GetHCLKFreq>
 8002910:	4602      	mov	r2, r0
 8002912:	4b05      	ldr	r3, [pc, #20]	; (8002928 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002914:	689b      	ldr	r3, [r3, #8]
 8002916:	0a9b      	lsrs	r3, r3, #10
 8002918:	f003 0307 	and.w	r3, r3, #7
 800291c:	4903      	ldr	r1, [pc, #12]	; (800292c <HAL_RCC_GetPCLK1Freq+0x24>)
 800291e:	5ccb      	ldrb	r3, [r1, r3]
 8002920:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002924:	4618      	mov	r0, r3
 8002926:	bd80      	pop	{r7, pc}
 8002928:	40023800 	.word	0x40023800
 800292c:	08003a00 	.word	0x08003a00

08002930 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002930:	b580      	push	{r7, lr}
 8002932:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002934:	f7ff ffdc 	bl	80028f0 <HAL_RCC_GetHCLKFreq>
 8002938:	4602      	mov	r2, r0
 800293a:	4b05      	ldr	r3, [pc, #20]	; (8002950 <HAL_RCC_GetPCLK2Freq+0x20>)
 800293c:	689b      	ldr	r3, [r3, #8]
 800293e:	0b5b      	lsrs	r3, r3, #13
 8002940:	f003 0307 	and.w	r3, r3, #7
 8002944:	4903      	ldr	r1, [pc, #12]	; (8002954 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002946:	5ccb      	ldrb	r3, [r1, r3]
 8002948:	fa22 f303 	lsr.w	r3, r2, r3
}
 800294c:	4618      	mov	r0, r3
 800294e:	bd80      	pop	{r7, pc}
 8002950:	40023800 	.word	0x40023800
 8002954:	08003a00 	.word	0x08003a00

08002958 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002958:	b580      	push	{r7, lr}
 800295a:	b082      	sub	sp, #8
 800295c:	af00      	add	r7, sp, #0
 800295e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	2b00      	cmp	r3, #0
 8002964:	d101      	bne.n	800296a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002966:	2301      	movs	r3, #1
 8002968:	e03f      	b.n	80029ea <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002970:	b2db      	uxtb	r3, r3
 8002972:	2b00      	cmp	r3, #0
 8002974:	d106      	bne.n	8002984 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	2200      	movs	r2, #0
 800297a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800297e:	6878      	ldr	r0, [r7, #4]
 8002980:	f7fd ff98 	bl	80008b4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	2224      	movs	r2, #36	; 0x24
 8002988:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	68da      	ldr	r2, [r3, #12]
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800299a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800299c:	6878      	ldr	r0, [r7, #4]
 800299e:	f000 fd7b 	bl	8003498 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	691a      	ldr	r2, [r3, #16]
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80029b0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	695a      	ldr	r2, [r3, #20]
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80029c0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	68da      	ldr	r2, [r3, #12]
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80029d0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	2200      	movs	r2, #0
 80029d6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	2220      	movs	r2, #32
 80029dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	2220      	movs	r2, #32
 80029e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80029e8:	2300      	movs	r3, #0
}
 80029ea:	4618      	mov	r0, r3
 80029ec:	3708      	adds	r7, #8
 80029ee:	46bd      	mov	sp, r7
 80029f0:	bd80      	pop	{r7, pc}

080029f2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80029f2:	b580      	push	{r7, lr}
 80029f4:	b08a      	sub	sp, #40	; 0x28
 80029f6:	af02      	add	r7, sp, #8
 80029f8:	60f8      	str	r0, [r7, #12]
 80029fa:	60b9      	str	r1, [r7, #8]
 80029fc:	603b      	str	r3, [r7, #0]
 80029fe:	4613      	mov	r3, r2
 8002a00:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002a02:	2300      	movs	r3, #0
 8002a04:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a0c:	b2db      	uxtb	r3, r3
 8002a0e:	2b20      	cmp	r3, #32
 8002a10:	d17c      	bne.n	8002b0c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002a12:	68bb      	ldr	r3, [r7, #8]
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d002      	beq.n	8002a1e <HAL_UART_Transmit+0x2c>
 8002a18:	88fb      	ldrh	r3, [r7, #6]
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d101      	bne.n	8002a22 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002a1e:	2301      	movs	r3, #1
 8002a20:	e075      	b.n	8002b0e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a28:	2b01      	cmp	r3, #1
 8002a2a:	d101      	bne.n	8002a30 <HAL_UART_Transmit+0x3e>
 8002a2c:	2302      	movs	r3, #2
 8002a2e:	e06e      	b.n	8002b0e <HAL_UART_Transmit+0x11c>
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	2201      	movs	r2, #1
 8002a34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	2200      	movs	r2, #0
 8002a3c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	2221      	movs	r2, #33	; 0x21
 8002a42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002a46:	f7fe f8b9 	bl	8000bbc <HAL_GetTick>
 8002a4a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	88fa      	ldrh	r2, [r7, #6]
 8002a50:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	88fa      	ldrh	r2, [r7, #6]
 8002a56:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	689b      	ldr	r3, [r3, #8]
 8002a5c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a60:	d108      	bne.n	8002a74 <HAL_UART_Transmit+0x82>
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	691b      	ldr	r3, [r3, #16]
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d104      	bne.n	8002a74 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002a6a:	2300      	movs	r3, #0
 8002a6c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002a6e:	68bb      	ldr	r3, [r7, #8]
 8002a70:	61bb      	str	r3, [r7, #24]
 8002a72:	e003      	b.n	8002a7c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002a74:	68bb      	ldr	r3, [r7, #8]
 8002a76:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002a78:	2300      	movs	r3, #0
 8002a7a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	2200      	movs	r2, #0
 8002a80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002a84:	e02a      	b.n	8002adc <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002a86:	683b      	ldr	r3, [r7, #0]
 8002a88:	9300      	str	r3, [sp, #0]
 8002a8a:	697b      	ldr	r3, [r7, #20]
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	2180      	movs	r1, #128	; 0x80
 8002a90:	68f8      	ldr	r0, [r7, #12]
 8002a92:	f000 faf9 	bl	8003088 <UART_WaitOnFlagUntilTimeout>
 8002a96:	4603      	mov	r3, r0
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d001      	beq.n	8002aa0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002a9c:	2303      	movs	r3, #3
 8002a9e:	e036      	b.n	8002b0e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002aa0:	69fb      	ldr	r3, [r7, #28]
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d10b      	bne.n	8002abe <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002aa6:	69bb      	ldr	r3, [r7, #24]
 8002aa8:	881b      	ldrh	r3, [r3, #0]
 8002aaa:	461a      	mov	r2, r3
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002ab4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002ab6:	69bb      	ldr	r3, [r7, #24]
 8002ab8:	3302      	adds	r3, #2
 8002aba:	61bb      	str	r3, [r7, #24]
 8002abc:	e007      	b.n	8002ace <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002abe:	69fb      	ldr	r3, [r7, #28]
 8002ac0:	781a      	ldrb	r2, [r3, #0]
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002ac8:	69fb      	ldr	r3, [r7, #28]
 8002aca:	3301      	adds	r3, #1
 8002acc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002ad2:	b29b      	uxth	r3, r3
 8002ad4:	3b01      	subs	r3, #1
 8002ad6:	b29a      	uxth	r2, r3
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002ae0:	b29b      	uxth	r3, r3
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d1cf      	bne.n	8002a86 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002ae6:	683b      	ldr	r3, [r7, #0]
 8002ae8:	9300      	str	r3, [sp, #0]
 8002aea:	697b      	ldr	r3, [r7, #20]
 8002aec:	2200      	movs	r2, #0
 8002aee:	2140      	movs	r1, #64	; 0x40
 8002af0:	68f8      	ldr	r0, [r7, #12]
 8002af2:	f000 fac9 	bl	8003088 <UART_WaitOnFlagUntilTimeout>
 8002af6:	4603      	mov	r3, r0
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d001      	beq.n	8002b00 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002afc:	2303      	movs	r3, #3
 8002afe:	e006      	b.n	8002b0e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	2220      	movs	r2, #32
 8002b04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002b08:	2300      	movs	r3, #0
 8002b0a:	e000      	b.n	8002b0e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002b0c:	2302      	movs	r3, #2
  }
}
 8002b0e:	4618      	mov	r0, r3
 8002b10:	3720      	adds	r7, #32
 8002b12:	46bd      	mov	sp, r7
 8002b14:	bd80      	pop	{r7, pc}
	...

08002b18 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	b0ba      	sub	sp, #232	; 0xe8
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	68db      	ldr	r3, [r3, #12]
 8002b30:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	695b      	ldr	r3, [r3, #20]
 8002b3a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8002b3e:	2300      	movs	r3, #0
 8002b40:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8002b44:	2300      	movs	r3, #0
 8002b46:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002b4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002b4e:	f003 030f 	and.w	r3, r3, #15
 8002b52:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8002b56:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d10f      	bne.n	8002b7e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002b5e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002b62:	f003 0320 	and.w	r3, r3, #32
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d009      	beq.n	8002b7e <HAL_UART_IRQHandler+0x66>
 8002b6a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002b6e:	f003 0320 	and.w	r3, r3, #32
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d003      	beq.n	8002b7e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8002b76:	6878      	ldr	r0, [r7, #4]
 8002b78:	f000 fbd3 	bl	8003322 <UART_Receive_IT>
      return;
 8002b7c:	e256      	b.n	800302c <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002b7e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	f000 80de 	beq.w	8002d44 <HAL_UART_IRQHandler+0x22c>
 8002b88:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002b8c:	f003 0301 	and.w	r3, r3, #1
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d106      	bne.n	8002ba2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002b94:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002b98:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	f000 80d1 	beq.w	8002d44 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002ba2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002ba6:	f003 0301 	and.w	r3, r3, #1
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d00b      	beq.n	8002bc6 <HAL_UART_IRQHandler+0xae>
 8002bae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002bb2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d005      	beq.n	8002bc6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bbe:	f043 0201 	orr.w	r2, r3, #1
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002bc6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002bca:	f003 0304 	and.w	r3, r3, #4
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d00b      	beq.n	8002bea <HAL_UART_IRQHandler+0xd2>
 8002bd2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002bd6:	f003 0301 	and.w	r3, r3, #1
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d005      	beq.n	8002bea <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002be2:	f043 0202 	orr.w	r2, r3, #2
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002bea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002bee:	f003 0302 	and.w	r3, r3, #2
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d00b      	beq.n	8002c0e <HAL_UART_IRQHandler+0xf6>
 8002bf6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002bfa:	f003 0301 	and.w	r3, r3, #1
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d005      	beq.n	8002c0e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c06:	f043 0204 	orr.w	r2, r3, #4
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8002c0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002c12:	f003 0308 	and.w	r3, r3, #8
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d011      	beq.n	8002c3e <HAL_UART_IRQHandler+0x126>
 8002c1a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002c1e:	f003 0320 	and.w	r3, r3, #32
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d105      	bne.n	8002c32 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8002c26:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002c2a:	f003 0301 	and.w	r3, r3, #1
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d005      	beq.n	8002c3e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c36:	f043 0208 	orr.w	r2, r3, #8
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	f000 81ed 	beq.w	8003022 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002c48:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002c4c:	f003 0320 	and.w	r3, r3, #32
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d008      	beq.n	8002c66 <HAL_UART_IRQHandler+0x14e>
 8002c54:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002c58:	f003 0320 	and.w	r3, r3, #32
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d002      	beq.n	8002c66 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002c60:	6878      	ldr	r0, [r7, #4]
 8002c62:	f000 fb5e 	bl	8003322 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	695b      	ldr	r3, [r3, #20]
 8002c6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c70:	2b40      	cmp	r3, #64	; 0x40
 8002c72:	bf0c      	ite	eq
 8002c74:	2301      	moveq	r3, #1
 8002c76:	2300      	movne	r3, #0
 8002c78:	b2db      	uxtb	r3, r3
 8002c7a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c82:	f003 0308 	and.w	r3, r3, #8
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d103      	bne.n	8002c92 <HAL_UART_IRQHandler+0x17a>
 8002c8a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d04f      	beq.n	8002d32 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002c92:	6878      	ldr	r0, [r7, #4]
 8002c94:	f000 fa66 	bl	8003164 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	695b      	ldr	r3, [r3, #20]
 8002c9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ca2:	2b40      	cmp	r3, #64	; 0x40
 8002ca4:	d141      	bne.n	8002d2a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	3314      	adds	r3, #20
 8002cac:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002cb0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002cb4:	e853 3f00 	ldrex	r3, [r3]
 8002cb8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002cbc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002cc0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002cc4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	3314      	adds	r3, #20
 8002cce:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8002cd2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8002cd6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002cda:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8002cde:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8002ce2:	e841 2300 	strex	r3, r2, [r1]
 8002ce6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8002cea:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d1d9      	bne.n	8002ca6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d013      	beq.n	8002d22 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cfe:	4a7d      	ldr	r2, [pc, #500]	; (8002ef4 <HAL_UART_IRQHandler+0x3dc>)
 8002d00:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d06:	4618      	mov	r0, r3
 8002d08:	f7fe fd94 	bl	8001834 <HAL_DMA_Abort_IT>
 8002d0c:	4603      	mov	r3, r0
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d016      	beq.n	8002d40 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d16:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d18:	687a      	ldr	r2, [r7, #4]
 8002d1a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002d1c:	4610      	mov	r0, r2
 8002d1e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d20:	e00e      	b.n	8002d40 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002d22:	6878      	ldr	r0, [r7, #4]
 8002d24:	f000 f99a 	bl	800305c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d28:	e00a      	b.n	8002d40 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002d2a:	6878      	ldr	r0, [r7, #4]
 8002d2c:	f000 f996 	bl	800305c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d30:	e006      	b.n	8002d40 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002d32:	6878      	ldr	r0, [r7, #4]
 8002d34:	f000 f992 	bl	800305c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	2200      	movs	r2, #0
 8002d3c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8002d3e:	e170      	b.n	8003022 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d40:	bf00      	nop
    return;
 8002d42:	e16e      	b.n	8003022 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d48:	2b01      	cmp	r3, #1
 8002d4a:	f040 814a 	bne.w	8002fe2 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8002d4e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002d52:	f003 0310 	and.w	r3, r3, #16
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	f000 8143 	beq.w	8002fe2 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002d5c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002d60:	f003 0310 	and.w	r3, r3, #16
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	f000 813c 	beq.w	8002fe2 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002d6a:	2300      	movs	r3, #0
 8002d6c:	60bb      	str	r3, [r7, #8]
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	60bb      	str	r3, [r7, #8]
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	685b      	ldr	r3, [r3, #4]
 8002d7c:	60bb      	str	r3, [r7, #8]
 8002d7e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	695b      	ldr	r3, [r3, #20]
 8002d86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d8a:	2b40      	cmp	r3, #64	; 0x40
 8002d8c:	f040 80b4 	bne.w	8002ef8 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	685b      	ldr	r3, [r3, #4]
 8002d98:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002d9c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	f000 8140 	beq.w	8003026 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002daa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002dae:	429a      	cmp	r2, r3
 8002db0:	f080 8139 	bcs.w	8003026 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002dba:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dc0:	69db      	ldr	r3, [r3, #28]
 8002dc2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002dc6:	f000 8088 	beq.w	8002eda <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	330c      	adds	r3, #12
 8002dd0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002dd4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002dd8:	e853 3f00 	ldrex	r3, [r3]
 8002ddc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8002de0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002de4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002de8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	330c      	adds	r3, #12
 8002df2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8002df6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002dfa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002dfe:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8002e02:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002e06:	e841 2300 	strex	r3, r2, [r1]
 8002e0a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8002e0e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d1d9      	bne.n	8002dca <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	3314      	adds	r3, #20
 8002e1c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e1e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002e20:	e853 3f00 	ldrex	r3, [r3]
 8002e24:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8002e26:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002e28:	f023 0301 	bic.w	r3, r3, #1
 8002e2c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	3314      	adds	r3, #20
 8002e36:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002e3a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8002e3e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e40:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002e42:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002e46:	e841 2300 	strex	r3, r2, [r1]
 8002e4a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8002e4c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d1e1      	bne.n	8002e16 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	3314      	adds	r3, #20
 8002e58:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e5a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002e5c:	e853 3f00 	ldrex	r3, [r3]
 8002e60:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8002e62:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002e64:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002e68:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	3314      	adds	r3, #20
 8002e72:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8002e76:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002e78:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e7a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002e7c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002e7e:	e841 2300 	strex	r3, r2, [r1]
 8002e82:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8002e84:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d1e3      	bne.n	8002e52 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	2220      	movs	r2, #32
 8002e8e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	2200      	movs	r2, #0
 8002e96:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	330c      	adds	r3, #12
 8002e9e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ea0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002ea2:	e853 3f00 	ldrex	r3, [r3]
 8002ea6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002ea8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002eaa:	f023 0310 	bic.w	r3, r3, #16
 8002eae:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	330c      	adds	r3, #12
 8002eb8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8002ebc:	65ba      	str	r2, [r7, #88]	; 0x58
 8002ebe:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ec0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002ec2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002ec4:	e841 2300 	strex	r3, r2, [r1]
 8002ec8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002eca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d1e3      	bne.n	8002e98 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ed4:	4618      	mov	r0, r3
 8002ed6:	f7fe fc3d 	bl	8001754 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002ee2:	b29b      	uxth	r3, r3
 8002ee4:	1ad3      	subs	r3, r2, r3
 8002ee6:	b29b      	uxth	r3, r3
 8002ee8:	4619      	mov	r1, r3
 8002eea:	6878      	ldr	r0, [r7, #4]
 8002eec:	f000 f8c0 	bl	8003070 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002ef0:	e099      	b.n	8003026 <HAL_UART_IRQHandler+0x50e>
 8002ef2:	bf00      	nop
 8002ef4:	0800322b 	.word	0x0800322b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002f00:	b29b      	uxth	r3, r3
 8002f02:	1ad3      	subs	r3, r2, r3
 8002f04:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002f0c:	b29b      	uxth	r3, r3
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	f000 808b 	beq.w	800302a <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8002f14:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	f000 8086 	beq.w	800302a <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	330c      	adds	r3, #12
 8002f24:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f28:	e853 3f00 	ldrex	r3, [r3]
 8002f2c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002f2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f30:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002f34:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	330c      	adds	r3, #12
 8002f3e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8002f42:	647a      	str	r2, [r7, #68]	; 0x44
 8002f44:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f46:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002f48:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002f4a:	e841 2300 	strex	r3, r2, [r1]
 8002f4e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002f50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d1e3      	bne.n	8002f1e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	3314      	adds	r3, #20
 8002f5c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f60:	e853 3f00 	ldrex	r3, [r3]
 8002f64:	623b      	str	r3, [r7, #32]
   return(result);
 8002f66:	6a3b      	ldr	r3, [r7, #32]
 8002f68:	f023 0301 	bic.w	r3, r3, #1
 8002f6c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	3314      	adds	r3, #20
 8002f76:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8002f7a:	633a      	str	r2, [r7, #48]	; 0x30
 8002f7c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f7e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002f80:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002f82:	e841 2300 	strex	r3, r2, [r1]
 8002f86:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002f88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d1e3      	bne.n	8002f56 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	2220      	movs	r2, #32
 8002f92:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	2200      	movs	r2, #0
 8002f9a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	330c      	adds	r3, #12
 8002fa2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002fa4:	693b      	ldr	r3, [r7, #16]
 8002fa6:	e853 3f00 	ldrex	r3, [r3]
 8002faa:	60fb      	str	r3, [r7, #12]
   return(result);
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	f023 0310 	bic.w	r3, r3, #16
 8002fb2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	330c      	adds	r3, #12
 8002fbc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8002fc0:	61fa      	str	r2, [r7, #28]
 8002fc2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fc4:	69b9      	ldr	r1, [r7, #24]
 8002fc6:	69fa      	ldr	r2, [r7, #28]
 8002fc8:	e841 2300 	strex	r3, r2, [r1]
 8002fcc:	617b      	str	r3, [r7, #20]
   return(result);
 8002fce:	697b      	ldr	r3, [r7, #20]
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d1e3      	bne.n	8002f9c <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002fd4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002fd8:	4619      	mov	r1, r3
 8002fda:	6878      	ldr	r0, [r7, #4]
 8002fdc:	f000 f848 	bl	8003070 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002fe0:	e023      	b.n	800302a <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002fe2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002fe6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d009      	beq.n	8003002 <HAL_UART_IRQHandler+0x4ea>
 8002fee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002ff2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d003      	beq.n	8003002 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8002ffa:	6878      	ldr	r0, [r7, #4]
 8002ffc:	f000 f929 	bl	8003252 <UART_Transmit_IT>
    return;
 8003000:	e014      	b.n	800302c <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003002:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003006:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800300a:	2b00      	cmp	r3, #0
 800300c:	d00e      	beq.n	800302c <HAL_UART_IRQHandler+0x514>
 800300e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003012:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003016:	2b00      	cmp	r3, #0
 8003018:	d008      	beq.n	800302c <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800301a:	6878      	ldr	r0, [r7, #4]
 800301c:	f000 f969 	bl	80032f2 <UART_EndTransmit_IT>
    return;
 8003020:	e004      	b.n	800302c <HAL_UART_IRQHandler+0x514>
    return;
 8003022:	bf00      	nop
 8003024:	e002      	b.n	800302c <HAL_UART_IRQHandler+0x514>
      return;
 8003026:	bf00      	nop
 8003028:	e000      	b.n	800302c <HAL_UART_IRQHandler+0x514>
      return;
 800302a:	bf00      	nop
  }
}
 800302c:	37e8      	adds	r7, #232	; 0xe8
 800302e:	46bd      	mov	sp, r7
 8003030:	bd80      	pop	{r7, pc}
 8003032:	bf00      	nop

08003034 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003034:	b480      	push	{r7}
 8003036:	b083      	sub	sp, #12
 8003038:	af00      	add	r7, sp, #0
 800303a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800303c:	bf00      	nop
 800303e:	370c      	adds	r7, #12
 8003040:	46bd      	mov	sp, r7
 8003042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003046:	4770      	bx	lr

08003048 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003048:	b480      	push	{r7}
 800304a:	b083      	sub	sp, #12
 800304c:	af00      	add	r7, sp, #0
 800304e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003050:	bf00      	nop
 8003052:	370c      	adds	r7, #12
 8003054:	46bd      	mov	sp, r7
 8003056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800305a:	4770      	bx	lr

0800305c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800305c:	b480      	push	{r7}
 800305e:	b083      	sub	sp, #12
 8003060:	af00      	add	r7, sp, #0
 8003062:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003064:	bf00      	nop
 8003066:	370c      	adds	r7, #12
 8003068:	46bd      	mov	sp, r7
 800306a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800306e:	4770      	bx	lr

08003070 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003070:	b480      	push	{r7}
 8003072:	b083      	sub	sp, #12
 8003074:	af00      	add	r7, sp, #0
 8003076:	6078      	str	r0, [r7, #4]
 8003078:	460b      	mov	r3, r1
 800307a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800307c:	bf00      	nop
 800307e:	370c      	adds	r7, #12
 8003080:	46bd      	mov	sp, r7
 8003082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003086:	4770      	bx	lr

08003088 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003088:	b580      	push	{r7, lr}
 800308a:	b090      	sub	sp, #64	; 0x40
 800308c:	af00      	add	r7, sp, #0
 800308e:	60f8      	str	r0, [r7, #12]
 8003090:	60b9      	str	r1, [r7, #8]
 8003092:	603b      	str	r3, [r7, #0]
 8003094:	4613      	mov	r3, r2
 8003096:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003098:	e050      	b.n	800313c <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800309a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800309c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030a0:	d04c      	beq.n	800313c <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80030a2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d007      	beq.n	80030b8 <UART_WaitOnFlagUntilTimeout+0x30>
 80030a8:	f7fd fd88 	bl	8000bbc <HAL_GetTick>
 80030ac:	4602      	mov	r2, r0
 80030ae:	683b      	ldr	r3, [r7, #0]
 80030b0:	1ad3      	subs	r3, r2, r3
 80030b2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80030b4:	429a      	cmp	r2, r3
 80030b6:	d241      	bcs.n	800313c <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	330c      	adds	r3, #12
 80030be:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030c2:	e853 3f00 	ldrex	r3, [r3]
 80030c6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80030c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030ca:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80030ce:	63fb      	str	r3, [r7, #60]	; 0x3c
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	330c      	adds	r3, #12
 80030d6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80030d8:	637a      	str	r2, [r7, #52]	; 0x34
 80030da:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030dc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80030de:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80030e0:	e841 2300 	strex	r3, r2, [r1]
 80030e4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80030e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d1e5      	bne.n	80030b8 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	3314      	adds	r3, #20
 80030f2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030f4:	697b      	ldr	r3, [r7, #20]
 80030f6:	e853 3f00 	ldrex	r3, [r3]
 80030fa:	613b      	str	r3, [r7, #16]
   return(result);
 80030fc:	693b      	ldr	r3, [r7, #16]
 80030fe:	f023 0301 	bic.w	r3, r3, #1
 8003102:	63bb      	str	r3, [r7, #56]	; 0x38
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	3314      	adds	r3, #20
 800310a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800310c:	623a      	str	r2, [r7, #32]
 800310e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003110:	69f9      	ldr	r1, [r7, #28]
 8003112:	6a3a      	ldr	r2, [r7, #32]
 8003114:	e841 2300 	strex	r3, r2, [r1]
 8003118:	61bb      	str	r3, [r7, #24]
   return(result);
 800311a:	69bb      	ldr	r3, [r7, #24]
 800311c:	2b00      	cmp	r3, #0
 800311e:	d1e5      	bne.n	80030ec <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	2220      	movs	r2, #32
 8003124:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	2220      	movs	r2, #32
 800312c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	2200      	movs	r2, #0
 8003134:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003138:	2303      	movs	r3, #3
 800313a:	e00f      	b.n	800315c <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	681a      	ldr	r2, [r3, #0]
 8003142:	68bb      	ldr	r3, [r7, #8]
 8003144:	4013      	ands	r3, r2
 8003146:	68ba      	ldr	r2, [r7, #8]
 8003148:	429a      	cmp	r2, r3
 800314a:	bf0c      	ite	eq
 800314c:	2301      	moveq	r3, #1
 800314e:	2300      	movne	r3, #0
 8003150:	b2db      	uxtb	r3, r3
 8003152:	461a      	mov	r2, r3
 8003154:	79fb      	ldrb	r3, [r7, #7]
 8003156:	429a      	cmp	r2, r3
 8003158:	d09f      	beq.n	800309a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800315a:	2300      	movs	r3, #0
}
 800315c:	4618      	mov	r0, r3
 800315e:	3740      	adds	r7, #64	; 0x40
 8003160:	46bd      	mov	sp, r7
 8003162:	bd80      	pop	{r7, pc}

08003164 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003164:	b480      	push	{r7}
 8003166:	b095      	sub	sp, #84	; 0x54
 8003168:	af00      	add	r7, sp, #0
 800316a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	330c      	adds	r3, #12
 8003172:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003174:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003176:	e853 3f00 	ldrex	r3, [r3]
 800317a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800317c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800317e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003182:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	330c      	adds	r3, #12
 800318a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800318c:	643a      	str	r2, [r7, #64]	; 0x40
 800318e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003190:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003192:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003194:	e841 2300 	strex	r3, r2, [r1]
 8003198:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800319a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800319c:	2b00      	cmp	r3, #0
 800319e:	d1e5      	bne.n	800316c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	3314      	adds	r3, #20
 80031a6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031a8:	6a3b      	ldr	r3, [r7, #32]
 80031aa:	e853 3f00 	ldrex	r3, [r3]
 80031ae:	61fb      	str	r3, [r7, #28]
   return(result);
 80031b0:	69fb      	ldr	r3, [r7, #28]
 80031b2:	f023 0301 	bic.w	r3, r3, #1
 80031b6:	64bb      	str	r3, [r7, #72]	; 0x48
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	3314      	adds	r3, #20
 80031be:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80031c0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80031c2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031c4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80031c6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80031c8:	e841 2300 	strex	r3, r2, [r1]
 80031cc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80031ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d1e5      	bne.n	80031a0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031d8:	2b01      	cmp	r3, #1
 80031da:	d119      	bne.n	8003210 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	330c      	adds	r3, #12
 80031e2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	e853 3f00 	ldrex	r3, [r3]
 80031ea:	60bb      	str	r3, [r7, #8]
   return(result);
 80031ec:	68bb      	ldr	r3, [r7, #8]
 80031ee:	f023 0310 	bic.w	r3, r3, #16
 80031f2:	647b      	str	r3, [r7, #68]	; 0x44
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	330c      	adds	r3, #12
 80031fa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80031fc:	61ba      	str	r2, [r7, #24]
 80031fe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003200:	6979      	ldr	r1, [r7, #20]
 8003202:	69ba      	ldr	r2, [r7, #24]
 8003204:	e841 2300 	strex	r3, r2, [r1]
 8003208:	613b      	str	r3, [r7, #16]
   return(result);
 800320a:	693b      	ldr	r3, [r7, #16]
 800320c:	2b00      	cmp	r3, #0
 800320e:	d1e5      	bne.n	80031dc <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	2220      	movs	r2, #32
 8003214:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	2200      	movs	r2, #0
 800321c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800321e:	bf00      	nop
 8003220:	3754      	adds	r7, #84	; 0x54
 8003222:	46bd      	mov	sp, r7
 8003224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003228:	4770      	bx	lr

0800322a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800322a:	b580      	push	{r7, lr}
 800322c:	b084      	sub	sp, #16
 800322e:	af00      	add	r7, sp, #0
 8003230:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003236:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	2200      	movs	r2, #0
 800323c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	2200      	movs	r2, #0
 8003242:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003244:	68f8      	ldr	r0, [r7, #12]
 8003246:	f7ff ff09 	bl	800305c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800324a:	bf00      	nop
 800324c:	3710      	adds	r7, #16
 800324e:	46bd      	mov	sp, r7
 8003250:	bd80      	pop	{r7, pc}

08003252 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003252:	b480      	push	{r7}
 8003254:	b085      	sub	sp, #20
 8003256:	af00      	add	r7, sp, #0
 8003258:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003260:	b2db      	uxtb	r3, r3
 8003262:	2b21      	cmp	r3, #33	; 0x21
 8003264:	d13e      	bne.n	80032e4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	689b      	ldr	r3, [r3, #8]
 800326a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800326e:	d114      	bne.n	800329a <UART_Transmit_IT+0x48>
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	691b      	ldr	r3, [r3, #16]
 8003274:	2b00      	cmp	r3, #0
 8003276:	d110      	bne.n	800329a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	6a1b      	ldr	r3, [r3, #32]
 800327c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	881b      	ldrh	r3, [r3, #0]
 8003282:	461a      	mov	r2, r3
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800328c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	6a1b      	ldr	r3, [r3, #32]
 8003292:	1c9a      	adds	r2, r3, #2
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	621a      	str	r2, [r3, #32]
 8003298:	e008      	b.n	80032ac <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	6a1b      	ldr	r3, [r3, #32]
 800329e:	1c59      	adds	r1, r3, #1
 80032a0:	687a      	ldr	r2, [r7, #4]
 80032a2:	6211      	str	r1, [r2, #32]
 80032a4:	781a      	ldrb	r2, [r3, #0]
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80032b0:	b29b      	uxth	r3, r3
 80032b2:	3b01      	subs	r3, #1
 80032b4:	b29b      	uxth	r3, r3
 80032b6:	687a      	ldr	r2, [r7, #4]
 80032b8:	4619      	mov	r1, r3
 80032ba:	84d1      	strh	r1, [r2, #38]	; 0x26
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d10f      	bne.n	80032e0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	68da      	ldr	r2, [r3, #12]
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80032ce:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	68da      	ldr	r2, [r3, #12]
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80032de:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80032e0:	2300      	movs	r3, #0
 80032e2:	e000      	b.n	80032e6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80032e4:	2302      	movs	r3, #2
  }
}
 80032e6:	4618      	mov	r0, r3
 80032e8:	3714      	adds	r7, #20
 80032ea:	46bd      	mov	sp, r7
 80032ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f0:	4770      	bx	lr

080032f2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80032f2:	b580      	push	{r7, lr}
 80032f4:	b082      	sub	sp, #8
 80032f6:	af00      	add	r7, sp, #0
 80032f8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	68da      	ldr	r2, [r3, #12]
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003308:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	2220      	movs	r2, #32
 800330e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003312:	6878      	ldr	r0, [r7, #4]
 8003314:	f7ff fe8e 	bl	8003034 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003318:	2300      	movs	r3, #0
}
 800331a:	4618      	mov	r0, r3
 800331c:	3708      	adds	r7, #8
 800331e:	46bd      	mov	sp, r7
 8003320:	bd80      	pop	{r7, pc}

08003322 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003322:	b580      	push	{r7, lr}
 8003324:	b08c      	sub	sp, #48	; 0x30
 8003326:	af00      	add	r7, sp, #0
 8003328:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003330:	b2db      	uxtb	r3, r3
 8003332:	2b22      	cmp	r3, #34	; 0x22
 8003334:	f040 80ab 	bne.w	800348e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	689b      	ldr	r3, [r3, #8]
 800333c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003340:	d117      	bne.n	8003372 <UART_Receive_IT+0x50>
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	691b      	ldr	r3, [r3, #16]
 8003346:	2b00      	cmp	r3, #0
 8003348:	d113      	bne.n	8003372 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800334a:	2300      	movs	r3, #0
 800334c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003352:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	685b      	ldr	r3, [r3, #4]
 800335a:	b29b      	uxth	r3, r3
 800335c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003360:	b29a      	uxth	r2, r3
 8003362:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003364:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800336a:	1c9a      	adds	r2, r3, #2
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	629a      	str	r2, [r3, #40]	; 0x28
 8003370:	e026      	b.n	80033c0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003376:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8003378:	2300      	movs	r3, #0
 800337a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	689b      	ldr	r3, [r3, #8]
 8003380:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003384:	d007      	beq.n	8003396 <UART_Receive_IT+0x74>
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	689b      	ldr	r3, [r3, #8]
 800338a:	2b00      	cmp	r3, #0
 800338c:	d10a      	bne.n	80033a4 <UART_Receive_IT+0x82>
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	691b      	ldr	r3, [r3, #16]
 8003392:	2b00      	cmp	r3, #0
 8003394:	d106      	bne.n	80033a4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	685b      	ldr	r3, [r3, #4]
 800339c:	b2da      	uxtb	r2, r3
 800339e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033a0:	701a      	strb	r2, [r3, #0]
 80033a2:	e008      	b.n	80033b6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	685b      	ldr	r3, [r3, #4]
 80033aa:	b2db      	uxtb	r3, r3
 80033ac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80033b0:	b2da      	uxtb	r2, r3
 80033b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033b4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033ba:	1c5a      	adds	r2, r3, #1
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80033c4:	b29b      	uxth	r3, r3
 80033c6:	3b01      	subs	r3, #1
 80033c8:	b29b      	uxth	r3, r3
 80033ca:	687a      	ldr	r2, [r7, #4]
 80033cc:	4619      	mov	r1, r3
 80033ce:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d15a      	bne.n	800348a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	68da      	ldr	r2, [r3, #12]
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f022 0220 	bic.w	r2, r2, #32
 80033e2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	68da      	ldr	r2, [r3, #12]
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80033f2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	695a      	ldr	r2, [r3, #20]
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f022 0201 	bic.w	r2, r2, #1
 8003402:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	2220      	movs	r2, #32
 8003408:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003410:	2b01      	cmp	r3, #1
 8003412:	d135      	bne.n	8003480 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	2200      	movs	r2, #0
 8003418:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	330c      	adds	r3, #12
 8003420:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003422:	697b      	ldr	r3, [r7, #20]
 8003424:	e853 3f00 	ldrex	r3, [r3]
 8003428:	613b      	str	r3, [r7, #16]
   return(result);
 800342a:	693b      	ldr	r3, [r7, #16]
 800342c:	f023 0310 	bic.w	r3, r3, #16
 8003430:	627b      	str	r3, [r7, #36]	; 0x24
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	330c      	adds	r3, #12
 8003438:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800343a:	623a      	str	r2, [r7, #32]
 800343c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800343e:	69f9      	ldr	r1, [r7, #28]
 8003440:	6a3a      	ldr	r2, [r7, #32]
 8003442:	e841 2300 	strex	r3, r2, [r1]
 8003446:	61bb      	str	r3, [r7, #24]
   return(result);
 8003448:	69bb      	ldr	r3, [r7, #24]
 800344a:	2b00      	cmp	r3, #0
 800344c:	d1e5      	bne.n	800341a <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	f003 0310 	and.w	r3, r3, #16
 8003458:	2b10      	cmp	r3, #16
 800345a:	d10a      	bne.n	8003472 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800345c:	2300      	movs	r3, #0
 800345e:	60fb      	str	r3, [r7, #12]
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	60fb      	str	r3, [r7, #12]
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	685b      	ldr	r3, [r3, #4]
 800346e:	60fb      	str	r3, [r7, #12]
 8003470:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003476:	4619      	mov	r1, r3
 8003478:	6878      	ldr	r0, [r7, #4]
 800347a:	f7ff fdf9 	bl	8003070 <HAL_UARTEx_RxEventCallback>
 800347e:	e002      	b.n	8003486 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003480:	6878      	ldr	r0, [r7, #4]
 8003482:	f7ff fde1 	bl	8003048 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003486:	2300      	movs	r3, #0
 8003488:	e002      	b.n	8003490 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800348a:	2300      	movs	r3, #0
 800348c:	e000      	b.n	8003490 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800348e:	2302      	movs	r3, #2
  }
}
 8003490:	4618      	mov	r0, r3
 8003492:	3730      	adds	r7, #48	; 0x30
 8003494:	46bd      	mov	sp, r7
 8003496:	bd80      	pop	{r7, pc}

08003498 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003498:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800349c:	b0c0      	sub	sp, #256	; 0x100
 800349e:	af00      	add	r7, sp, #0
 80034a0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80034a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	691b      	ldr	r3, [r3, #16]
 80034ac:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80034b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034b4:	68d9      	ldr	r1, [r3, #12]
 80034b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034ba:	681a      	ldr	r2, [r3, #0]
 80034bc:	ea40 0301 	orr.w	r3, r0, r1
 80034c0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80034c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034c6:	689a      	ldr	r2, [r3, #8]
 80034c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034cc:	691b      	ldr	r3, [r3, #16]
 80034ce:	431a      	orrs	r2, r3
 80034d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034d4:	695b      	ldr	r3, [r3, #20]
 80034d6:	431a      	orrs	r2, r3
 80034d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034dc:	69db      	ldr	r3, [r3, #28]
 80034de:	4313      	orrs	r3, r2
 80034e0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80034e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	68db      	ldr	r3, [r3, #12]
 80034ec:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80034f0:	f021 010c 	bic.w	r1, r1, #12
 80034f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034f8:	681a      	ldr	r2, [r3, #0]
 80034fa:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80034fe:	430b      	orrs	r3, r1
 8003500:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003502:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	695b      	ldr	r3, [r3, #20]
 800350a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800350e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003512:	6999      	ldr	r1, [r3, #24]
 8003514:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003518:	681a      	ldr	r2, [r3, #0]
 800351a:	ea40 0301 	orr.w	r3, r0, r1
 800351e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003520:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003524:	681a      	ldr	r2, [r3, #0]
 8003526:	4b8f      	ldr	r3, [pc, #572]	; (8003764 <UART_SetConfig+0x2cc>)
 8003528:	429a      	cmp	r2, r3
 800352a:	d005      	beq.n	8003538 <UART_SetConfig+0xa0>
 800352c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003530:	681a      	ldr	r2, [r3, #0]
 8003532:	4b8d      	ldr	r3, [pc, #564]	; (8003768 <UART_SetConfig+0x2d0>)
 8003534:	429a      	cmp	r2, r3
 8003536:	d104      	bne.n	8003542 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003538:	f7ff f9fa 	bl	8002930 <HAL_RCC_GetPCLK2Freq>
 800353c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003540:	e003      	b.n	800354a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003542:	f7ff f9e1 	bl	8002908 <HAL_RCC_GetPCLK1Freq>
 8003546:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800354a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800354e:	69db      	ldr	r3, [r3, #28]
 8003550:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003554:	f040 810c 	bne.w	8003770 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003558:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800355c:	2200      	movs	r2, #0
 800355e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003562:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003566:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800356a:	4622      	mov	r2, r4
 800356c:	462b      	mov	r3, r5
 800356e:	1891      	adds	r1, r2, r2
 8003570:	65b9      	str	r1, [r7, #88]	; 0x58
 8003572:	415b      	adcs	r3, r3
 8003574:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003576:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800357a:	4621      	mov	r1, r4
 800357c:	eb12 0801 	adds.w	r8, r2, r1
 8003580:	4629      	mov	r1, r5
 8003582:	eb43 0901 	adc.w	r9, r3, r1
 8003586:	f04f 0200 	mov.w	r2, #0
 800358a:	f04f 0300 	mov.w	r3, #0
 800358e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003592:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003596:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800359a:	4690      	mov	r8, r2
 800359c:	4699      	mov	r9, r3
 800359e:	4623      	mov	r3, r4
 80035a0:	eb18 0303 	adds.w	r3, r8, r3
 80035a4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80035a8:	462b      	mov	r3, r5
 80035aa:	eb49 0303 	adc.w	r3, r9, r3
 80035ae:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80035b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80035b6:	685b      	ldr	r3, [r3, #4]
 80035b8:	2200      	movs	r2, #0
 80035ba:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80035be:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80035c2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80035c6:	460b      	mov	r3, r1
 80035c8:	18db      	adds	r3, r3, r3
 80035ca:	653b      	str	r3, [r7, #80]	; 0x50
 80035cc:	4613      	mov	r3, r2
 80035ce:	eb42 0303 	adc.w	r3, r2, r3
 80035d2:	657b      	str	r3, [r7, #84]	; 0x54
 80035d4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80035d8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80035dc:	f7fc fdf4 	bl	80001c8 <__aeabi_uldivmod>
 80035e0:	4602      	mov	r2, r0
 80035e2:	460b      	mov	r3, r1
 80035e4:	4b61      	ldr	r3, [pc, #388]	; (800376c <UART_SetConfig+0x2d4>)
 80035e6:	fba3 2302 	umull	r2, r3, r3, r2
 80035ea:	095b      	lsrs	r3, r3, #5
 80035ec:	011c      	lsls	r4, r3, #4
 80035ee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80035f2:	2200      	movs	r2, #0
 80035f4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80035f8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80035fc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003600:	4642      	mov	r2, r8
 8003602:	464b      	mov	r3, r9
 8003604:	1891      	adds	r1, r2, r2
 8003606:	64b9      	str	r1, [r7, #72]	; 0x48
 8003608:	415b      	adcs	r3, r3
 800360a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800360c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003610:	4641      	mov	r1, r8
 8003612:	eb12 0a01 	adds.w	sl, r2, r1
 8003616:	4649      	mov	r1, r9
 8003618:	eb43 0b01 	adc.w	fp, r3, r1
 800361c:	f04f 0200 	mov.w	r2, #0
 8003620:	f04f 0300 	mov.w	r3, #0
 8003624:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003628:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800362c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003630:	4692      	mov	sl, r2
 8003632:	469b      	mov	fp, r3
 8003634:	4643      	mov	r3, r8
 8003636:	eb1a 0303 	adds.w	r3, sl, r3
 800363a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800363e:	464b      	mov	r3, r9
 8003640:	eb4b 0303 	adc.w	r3, fp, r3
 8003644:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003648:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800364c:	685b      	ldr	r3, [r3, #4]
 800364e:	2200      	movs	r2, #0
 8003650:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003654:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003658:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800365c:	460b      	mov	r3, r1
 800365e:	18db      	adds	r3, r3, r3
 8003660:	643b      	str	r3, [r7, #64]	; 0x40
 8003662:	4613      	mov	r3, r2
 8003664:	eb42 0303 	adc.w	r3, r2, r3
 8003668:	647b      	str	r3, [r7, #68]	; 0x44
 800366a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800366e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003672:	f7fc fda9 	bl	80001c8 <__aeabi_uldivmod>
 8003676:	4602      	mov	r2, r0
 8003678:	460b      	mov	r3, r1
 800367a:	4611      	mov	r1, r2
 800367c:	4b3b      	ldr	r3, [pc, #236]	; (800376c <UART_SetConfig+0x2d4>)
 800367e:	fba3 2301 	umull	r2, r3, r3, r1
 8003682:	095b      	lsrs	r3, r3, #5
 8003684:	2264      	movs	r2, #100	; 0x64
 8003686:	fb02 f303 	mul.w	r3, r2, r3
 800368a:	1acb      	subs	r3, r1, r3
 800368c:	00db      	lsls	r3, r3, #3
 800368e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003692:	4b36      	ldr	r3, [pc, #216]	; (800376c <UART_SetConfig+0x2d4>)
 8003694:	fba3 2302 	umull	r2, r3, r3, r2
 8003698:	095b      	lsrs	r3, r3, #5
 800369a:	005b      	lsls	r3, r3, #1
 800369c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80036a0:	441c      	add	r4, r3
 80036a2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80036a6:	2200      	movs	r2, #0
 80036a8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80036ac:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80036b0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80036b4:	4642      	mov	r2, r8
 80036b6:	464b      	mov	r3, r9
 80036b8:	1891      	adds	r1, r2, r2
 80036ba:	63b9      	str	r1, [r7, #56]	; 0x38
 80036bc:	415b      	adcs	r3, r3
 80036be:	63fb      	str	r3, [r7, #60]	; 0x3c
 80036c0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80036c4:	4641      	mov	r1, r8
 80036c6:	1851      	adds	r1, r2, r1
 80036c8:	6339      	str	r1, [r7, #48]	; 0x30
 80036ca:	4649      	mov	r1, r9
 80036cc:	414b      	adcs	r3, r1
 80036ce:	637b      	str	r3, [r7, #52]	; 0x34
 80036d0:	f04f 0200 	mov.w	r2, #0
 80036d4:	f04f 0300 	mov.w	r3, #0
 80036d8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80036dc:	4659      	mov	r1, fp
 80036de:	00cb      	lsls	r3, r1, #3
 80036e0:	4651      	mov	r1, sl
 80036e2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80036e6:	4651      	mov	r1, sl
 80036e8:	00ca      	lsls	r2, r1, #3
 80036ea:	4610      	mov	r0, r2
 80036ec:	4619      	mov	r1, r3
 80036ee:	4603      	mov	r3, r0
 80036f0:	4642      	mov	r2, r8
 80036f2:	189b      	adds	r3, r3, r2
 80036f4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80036f8:	464b      	mov	r3, r9
 80036fa:	460a      	mov	r2, r1
 80036fc:	eb42 0303 	adc.w	r3, r2, r3
 8003700:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003704:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003708:	685b      	ldr	r3, [r3, #4]
 800370a:	2200      	movs	r2, #0
 800370c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003710:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003714:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003718:	460b      	mov	r3, r1
 800371a:	18db      	adds	r3, r3, r3
 800371c:	62bb      	str	r3, [r7, #40]	; 0x28
 800371e:	4613      	mov	r3, r2
 8003720:	eb42 0303 	adc.w	r3, r2, r3
 8003724:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003726:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800372a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800372e:	f7fc fd4b 	bl	80001c8 <__aeabi_uldivmod>
 8003732:	4602      	mov	r2, r0
 8003734:	460b      	mov	r3, r1
 8003736:	4b0d      	ldr	r3, [pc, #52]	; (800376c <UART_SetConfig+0x2d4>)
 8003738:	fba3 1302 	umull	r1, r3, r3, r2
 800373c:	095b      	lsrs	r3, r3, #5
 800373e:	2164      	movs	r1, #100	; 0x64
 8003740:	fb01 f303 	mul.w	r3, r1, r3
 8003744:	1ad3      	subs	r3, r2, r3
 8003746:	00db      	lsls	r3, r3, #3
 8003748:	3332      	adds	r3, #50	; 0x32
 800374a:	4a08      	ldr	r2, [pc, #32]	; (800376c <UART_SetConfig+0x2d4>)
 800374c:	fba2 2303 	umull	r2, r3, r2, r3
 8003750:	095b      	lsrs	r3, r3, #5
 8003752:	f003 0207 	and.w	r2, r3, #7
 8003756:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	4422      	add	r2, r4
 800375e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003760:	e105      	b.n	800396e <UART_SetConfig+0x4d6>
 8003762:	bf00      	nop
 8003764:	40011000 	.word	0x40011000
 8003768:	40011400 	.word	0x40011400
 800376c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003770:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003774:	2200      	movs	r2, #0
 8003776:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800377a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800377e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003782:	4642      	mov	r2, r8
 8003784:	464b      	mov	r3, r9
 8003786:	1891      	adds	r1, r2, r2
 8003788:	6239      	str	r1, [r7, #32]
 800378a:	415b      	adcs	r3, r3
 800378c:	627b      	str	r3, [r7, #36]	; 0x24
 800378e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003792:	4641      	mov	r1, r8
 8003794:	1854      	adds	r4, r2, r1
 8003796:	4649      	mov	r1, r9
 8003798:	eb43 0501 	adc.w	r5, r3, r1
 800379c:	f04f 0200 	mov.w	r2, #0
 80037a0:	f04f 0300 	mov.w	r3, #0
 80037a4:	00eb      	lsls	r3, r5, #3
 80037a6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80037aa:	00e2      	lsls	r2, r4, #3
 80037ac:	4614      	mov	r4, r2
 80037ae:	461d      	mov	r5, r3
 80037b0:	4643      	mov	r3, r8
 80037b2:	18e3      	adds	r3, r4, r3
 80037b4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80037b8:	464b      	mov	r3, r9
 80037ba:	eb45 0303 	adc.w	r3, r5, r3
 80037be:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80037c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037c6:	685b      	ldr	r3, [r3, #4]
 80037c8:	2200      	movs	r2, #0
 80037ca:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80037ce:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80037d2:	f04f 0200 	mov.w	r2, #0
 80037d6:	f04f 0300 	mov.w	r3, #0
 80037da:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80037de:	4629      	mov	r1, r5
 80037e0:	008b      	lsls	r3, r1, #2
 80037e2:	4621      	mov	r1, r4
 80037e4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80037e8:	4621      	mov	r1, r4
 80037ea:	008a      	lsls	r2, r1, #2
 80037ec:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80037f0:	f7fc fcea 	bl	80001c8 <__aeabi_uldivmod>
 80037f4:	4602      	mov	r2, r0
 80037f6:	460b      	mov	r3, r1
 80037f8:	4b60      	ldr	r3, [pc, #384]	; (800397c <UART_SetConfig+0x4e4>)
 80037fa:	fba3 2302 	umull	r2, r3, r3, r2
 80037fe:	095b      	lsrs	r3, r3, #5
 8003800:	011c      	lsls	r4, r3, #4
 8003802:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003806:	2200      	movs	r2, #0
 8003808:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800380c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003810:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003814:	4642      	mov	r2, r8
 8003816:	464b      	mov	r3, r9
 8003818:	1891      	adds	r1, r2, r2
 800381a:	61b9      	str	r1, [r7, #24]
 800381c:	415b      	adcs	r3, r3
 800381e:	61fb      	str	r3, [r7, #28]
 8003820:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003824:	4641      	mov	r1, r8
 8003826:	1851      	adds	r1, r2, r1
 8003828:	6139      	str	r1, [r7, #16]
 800382a:	4649      	mov	r1, r9
 800382c:	414b      	adcs	r3, r1
 800382e:	617b      	str	r3, [r7, #20]
 8003830:	f04f 0200 	mov.w	r2, #0
 8003834:	f04f 0300 	mov.w	r3, #0
 8003838:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800383c:	4659      	mov	r1, fp
 800383e:	00cb      	lsls	r3, r1, #3
 8003840:	4651      	mov	r1, sl
 8003842:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003846:	4651      	mov	r1, sl
 8003848:	00ca      	lsls	r2, r1, #3
 800384a:	4610      	mov	r0, r2
 800384c:	4619      	mov	r1, r3
 800384e:	4603      	mov	r3, r0
 8003850:	4642      	mov	r2, r8
 8003852:	189b      	adds	r3, r3, r2
 8003854:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003858:	464b      	mov	r3, r9
 800385a:	460a      	mov	r2, r1
 800385c:	eb42 0303 	adc.w	r3, r2, r3
 8003860:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003864:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003868:	685b      	ldr	r3, [r3, #4]
 800386a:	2200      	movs	r2, #0
 800386c:	67bb      	str	r3, [r7, #120]	; 0x78
 800386e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003870:	f04f 0200 	mov.w	r2, #0
 8003874:	f04f 0300 	mov.w	r3, #0
 8003878:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800387c:	4649      	mov	r1, r9
 800387e:	008b      	lsls	r3, r1, #2
 8003880:	4641      	mov	r1, r8
 8003882:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003886:	4641      	mov	r1, r8
 8003888:	008a      	lsls	r2, r1, #2
 800388a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800388e:	f7fc fc9b 	bl	80001c8 <__aeabi_uldivmod>
 8003892:	4602      	mov	r2, r0
 8003894:	460b      	mov	r3, r1
 8003896:	4b39      	ldr	r3, [pc, #228]	; (800397c <UART_SetConfig+0x4e4>)
 8003898:	fba3 1302 	umull	r1, r3, r3, r2
 800389c:	095b      	lsrs	r3, r3, #5
 800389e:	2164      	movs	r1, #100	; 0x64
 80038a0:	fb01 f303 	mul.w	r3, r1, r3
 80038a4:	1ad3      	subs	r3, r2, r3
 80038a6:	011b      	lsls	r3, r3, #4
 80038a8:	3332      	adds	r3, #50	; 0x32
 80038aa:	4a34      	ldr	r2, [pc, #208]	; (800397c <UART_SetConfig+0x4e4>)
 80038ac:	fba2 2303 	umull	r2, r3, r2, r3
 80038b0:	095b      	lsrs	r3, r3, #5
 80038b2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80038b6:	441c      	add	r4, r3
 80038b8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80038bc:	2200      	movs	r2, #0
 80038be:	673b      	str	r3, [r7, #112]	; 0x70
 80038c0:	677a      	str	r2, [r7, #116]	; 0x74
 80038c2:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80038c6:	4642      	mov	r2, r8
 80038c8:	464b      	mov	r3, r9
 80038ca:	1891      	adds	r1, r2, r2
 80038cc:	60b9      	str	r1, [r7, #8]
 80038ce:	415b      	adcs	r3, r3
 80038d0:	60fb      	str	r3, [r7, #12]
 80038d2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80038d6:	4641      	mov	r1, r8
 80038d8:	1851      	adds	r1, r2, r1
 80038da:	6039      	str	r1, [r7, #0]
 80038dc:	4649      	mov	r1, r9
 80038de:	414b      	adcs	r3, r1
 80038e0:	607b      	str	r3, [r7, #4]
 80038e2:	f04f 0200 	mov.w	r2, #0
 80038e6:	f04f 0300 	mov.w	r3, #0
 80038ea:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80038ee:	4659      	mov	r1, fp
 80038f0:	00cb      	lsls	r3, r1, #3
 80038f2:	4651      	mov	r1, sl
 80038f4:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80038f8:	4651      	mov	r1, sl
 80038fa:	00ca      	lsls	r2, r1, #3
 80038fc:	4610      	mov	r0, r2
 80038fe:	4619      	mov	r1, r3
 8003900:	4603      	mov	r3, r0
 8003902:	4642      	mov	r2, r8
 8003904:	189b      	adds	r3, r3, r2
 8003906:	66bb      	str	r3, [r7, #104]	; 0x68
 8003908:	464b      	mov	r3, r9
 800390a:	460a      	mov	r2, r1
 800390c:	eb42 0303 	adc.w	r3, r2, r3
 8003910:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003912:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003916:	685b      	ldr	r3, [r3, #4]
 8003918:	2200      	movs	r2, #0
 800391a:	663b      	str	r3, [r7, #96]	; 0x60
 800391c:	667a      	str	r2, [r7, #100]	; 0x64
 800391e:	f04f 0200 	mov.w	r2, #0
 8003922:	f04f 0300 	mov.w	r3, #0
 8003926:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800392a:	4649      	mov	r1, r9
 800392c:	008b      	lsls	r3, r1, #2
 800392e:	4641      	mov	r1, r8
 8003930:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003934:	4641      	mov	r1, r8
 8003936:	008a      	lsls	r2, r1, #2
 8003938:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800393c:	f7fc fc44 	bl	80001c8 <__aeabi_uldivmod>
 8003940:	4602      	mov	r2, r0
 8003942:	460b      	mov	r3, r1
 8003944:	4b0d      	ldr	r3, [pc, #52]	; (800397c <UART_SetConfig+0x4e4>)
 8003946:	fba3 1302 	umull	r1, r3, r3, r2
 800394a:	095b      	lsrs	r3, r3, #5
 800394c:	2164      	movs	r1, #100	; 0x64
 800394e:	fb01 f303 	mul.w	r3, r1, r3
 8003952:	1ad3      	subs	r3, r2, r3
 8003954:	011b      	lsls	r3, r3, #4
 8003956:	3332      	adds	r3, #50	; 0x32
 8003958:	4a08      	ldr	r2, [pc, #32]	; (800397c <UART_SetConfig+0x4e4>)
 800395a:	fba2 2303 	umull	r2, r3, r2, r3
 800395e:	095b      	lsrs	r3, r3, #5
 8003960:	f003 020f 	and.w	r2, r3, #15
 8003964:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	4422      	add	r2, r4
 800396c:	609a      	str	r2, [r3, #8]
}
 800396e:	bf00      	nop
 8003970:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003974:	46bd      	mov	sp, r7
 8003976:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800397a:	bf00      	nop
 800397c:	51eb851f 	.word	0x51eb851f

08003980 <__libc_init_array>:
 8003980:	b570      	push	{r4, r5, r6, lr}
 8003982:	4d0d      	ldr	r5, [pc, #52]	; (80039b8 <__libc_init_array+0x38>)
 8003984:	4c0d      	ldr	r4, [pc, #52]	; (80039bc <__libc_init_array+0x3c>)
 8003986:	1b64      	subs	r4, r4, r5
 8003988:	10a4      	asrs	r4, r4, #2
 800398a:	2600      	movs	r6, #0
 800398c:	42a6      	cmp	r6, r4
 800398e:	d109      	bne.n	80039a4 <__libc_init_array+0x24>
 8003990:	4d0b      	ldr	r5, [pc, #44]	; (80039c0 <__libc_init_array+0x40>)
 8003992:	4c0c      	ldr	r4, [pc, #48]	; (80039c4 <__libc_init_array+0x44>)
 8003994:	f000 f820 	bl	80039d8 <_init>
 8003998:	1b64      	subs	r4, r4, r5
 800399a:	10a4      	asrs	r4, r4, #2
 800399c:	2600      	movs	r6, #0
 800399e:	42a6      	cmp	r6, r4
 80039a0:	d105      	bne.n	80039ae <__libc_init_array+0x2e>
 80039a2:	bd70      	pop	{r4, r5, r6, pc}
 80039a4:	f855 3b04 	ldr.w	r3, [r5], #4
 80039a8:	4798      	blx	r3
 80039aa:	3601      	adds	r6, #1
 80039ac:	e7ee      	b.n	800398c <__libc_init_array+0xc>
 80039ae:	f855 3b04 	ldr.w	r3, [r5], #4
 80039b2:	4798      	blx	r3
 80039b4:	3601      	adds	r6, #1
 80039b6:	e7f2      	b.n	800399e <__libc_init_array+0x1e>
 80039b8:	08003a18 	.word	0x08003a18
 80039bc:	08003a18 	.word	0x08003a18
 80039c0:	08003a18 	.word	0x08003a18
 80039c4:	08003a1c 	.word	0x08003a1c

080039c8 <memset>:
 80039c8:	4402      	add	r2, r0
 80039ca:	4603      	mov	r3, r0
 80039cc:	4293      	cmp	r3, r2
 80039ce:	d100      	bne.n	80039d2 <memset+0xa>
 80039d0:	4770      	bx	lr
 80039d2:	f803 1b01 	strb.w	r1, [r3], #1
 80039d6:	e7f9      	b.n	80039cc <memset+0x4>

080039d8 <_init>:
 80039d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80039da:	bf00      	nop
 80039dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80039de:	bc08      	pop	{r3}
 80039e0:	469e      	mov	lr, r3
 80039e2:	4770      	bx	lr

080039e4 <_fini>:
 80039e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80039e6:	bf00      	nop
 80039e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80039ea:	bc08      	pop	{r3}
 80039ec:	469e      	mov	lr, r3
 80039ee:	4770      	bx	lr
